{-# OPTIONS --cubical --lossy-unification #-}
module Pushout.New.cont where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.GroupoidLaws
open import Cubical.Foundations.Equiv.Properties
open import Cubical.Foundations.Function
open import Cubical.Foundations.Isomorphism

open import Cubical.CW.Base
open import Cubical.CW.Map

open import Cubical.Data.Empty
open import Cubical.Data.Nat renaming (_+_ to _+‚Ñï_)
open import Cubical.Data.NatMinusOne
open import Cubical.Data.Nat.Order
open import Cubical.Data.Bool
open import Cubical.Data.Sum
open import Cubical.Data.Fin.Inductive.Base
open import Cubical.Data.Sigma
open import Cubical.Data.Sequence
open import Cubical.Data.FinSequence

open import Cubical.HITs.S1
open import Cubical.HITs.Sn
open import Cubical.HITs.Susp
open import Cubical.HITs.Pushout
open import Cubical.HITs.SequentialColimit
open import Cubical.HITs.SphereBouquet
open import Cubical.HITs.PropositionalTruncation as PT
open import Cubical.Data.Empty as ‚ä•
open import Cubical.Foundations.Pointed
open import Cubical.HITs.Wedge
open import Cubical.Foundations.Pointed.Homogeneous
open import Cubical.Data.Fin.Inductive.Properties


open import Cubical.Data.Empty
open import Cubical.Data.Nat renaming (_+_ to _+‚Ñï_)
open import Cubical.Data.NatMinusOne
open import Cubical.Data.Nat.Order
open import Cubical.Data.Bool
open import Cubical.Data.Sum as ‚äé
open import Cubical.Data.Fin.Inductive.Base
open import Cubical.Data.Fin.Inductive.Properties
open import Cubical.Data.Sigma
open import Cubical.Data.Sequence
open import Cubical.Data.FinSequence

open import Cubical.HITs.S1
open import Cubical.HITs.Sn
open import Cubical.HITs.Susp
open import Cubical.HITs.Pushout
open import Cubical.HITs.SequentialColimit
open import Cubical.HITs.SphereBouquet
open import Cubical.HITs.PropositionalTruncation as PT

open import Cubical.Data.Nat


open import Cubical.CW.Properties
open import Cubical.Algebra.ChainComplex
open import Cubical.CW.ChainComplex
open import Cubical.CW.Homology
open import Cubical.Algebra.Group.Morphisms

open import Cubical.Foundations.Pointed
open import Cubical.HITs.Wedge

open import Hurewicz.random
open import Cubical.HITs.SphereBouquet.Degree
open import Cubical.Foundations.Pointed.Homogeneous
open import Cubical.Foundations.Path


open import Cubical.Homotopy.Group.Base


data Susp' {‚Ñì} (A : Pointed ‚Ñì) : Type ‚Ñì where
  ùï§ : Susp' A
  ùïù : fst A ‚Üí ùï§ ‚â° ùï§
  ùïî : ùïù (pt A) ‚â° refl



SphereBouquet' : ‚àÄ {‚Ñì} (n : ‚Ñï) (A : Type ‚Ñì) ‚Üí Type ‚Ñì
SphereBouquet' n A = ‚ãÅgen A Œª _ ‚Üí Susp (S‚Åª n) , north


open import Cubical.Data.Empty
open import Pushout.New.finaltry

-Susp : {‚Ñì : Level} {‚Ñì' : Level} (A : Pointed ‚Ñì) {B : Pointed ‚Ñì'}
       ‚Üí Susp‚àô (typ A) ‚Üí‚àô B ‚Üí Susp‚àô (typ A) ‚Üí‚àô B
-Susp = {!!}

-- module _ {‚Ñì : Level} {A : Type ‚Ñì}
--        (u : (i j k : I) ‚Üí _)
--        {u0 : (i j : I) ‚Üí  A [ ~ i ‚à® i ‚à® ~ j ‚à® j ‚Ü¶ u i j i0 ]}
--        {us : (i k : I) ‚Üí  A [ ~ i ‚à® i ‚à® ~ k ‚à® k ‚Ü¶ u i i0 k ]}
--        {us2 : (i k : I) ‚Üí  A [ ~ i ‚à® i ‚à® ~ k ‚à® k ‚Ü¶ u i i1 k ]}
--        {us3 : (j k : I) ‚Üí  A [ ~ j ‚à® j ‚à® ~ k ‚à® k ‚Ü¶ u i0 j k ]}
--        {us4 : (j k : I) ‚Üí  A [ ~ j ‚à® j ‚à® ~ k ‚à® k ‚Ü¶ u i1 j k ]}
       
       
       
--        ---------------------------
--   where
--   bot' : (i j : I) ‚Üí A
--   bot' i j = hcomp (u i j) (outS (u0 i j))

--   full : (i j : I) ‚Üí A
--   full i j = hcomp (Œª k ‚Üí Œª {(i = i0) ‚Üí {!!}
--                         ; (i = i1) ‚Üí {!!}
--                         ; (j = i0) ‚Üí {!!}
--                         ;  (j = i1) ‚Üí hcomp {!!} {!!}})
--                (bot' i j)

  -- hcgen : A
  -- hcgen = hcomp (Œª r ‚Üí Œª {(i = i0) ‚Üí {!!} ; (i = i1) ‚Üí {!!}}) (outS {!!})


-- module _ {‚Ñì : Level} {A : Type ‚Ñì}
--        {œÜ : I}
--        {u : ‚àÄ i ‚Üí Partial œÜ A}
--        {u0 : A [ œÜ ‚Ü¶ u i0 ]}
--        ---------------------------
--   where
--   hcgen : A
--   hcgen = hcomp ((Œª j ‚Üí Œª { (œÜ = i1) ‚Üí u j 1=1}))
--                 (outS u0)


test : ‚àÄ {‚Ñì} {A : Type ‚Ñì} {x y : A} ‚Üí (p : x ‚â° y) ‚Üí p ‚â° p
test {x = x} {y} p i j = {!!} -- hcgen {u = Œª r ‚Üí Œª {(i = i0) ‚Üí {!!} ; (i = i1) ‚Üí {!!} ; (j = i0) ‚Üí {!!} ; (j = i1) ‚Üí {!!}}} {u0 = {!x!}}


open import Cubical.Foundations.Path
module _ {‚Ñì} {A : Type ‚Ñì}
  {a‚ÇÄ‚ÇÄ‚ÇÄ a‚ÇÄ‚ÇÄ‚ÇÅ : A} {a‚ÇÄ‚ÇÄ‚Çã : a‚ÇÄ‚ÇÄ‚ÇÄ ‚â° a‚ÇÄ‚ÇÄ‚ÇÅ}
  {a‚ÇÄ‚ÇÅ‚ÇÄ a‚ÇÄ‚ÇÅ‚ÇÅ : A} {a‚ÇÄ‚ÇÅ‚Çã : a‚ÇÄ‚ÇÅ‚ÇÄ ‚â° a‚ÇÄ‚ÇÅ‚ÇÅ}
  {a‚ÇÄ‚Çã‚ÇÄ : a‚ÇÄ‚ÇÄ‚ÇÄ ‚â° a‚ÇÄ‚ÇÅ‚ÇÄ} {a‚ÇÄ‚Çã‚ÇÅ : a‚ÇÄ‚ÇÄ‚ÇÅ ‚â° a‚ÇÄ‚ÇÅ‚ÇÅ}
  {a‚ÇÄ‚Çã‚Çã : Square a‚ÇÄ‚ÇÄ‚Çã a‚ÇÄ‚ÇÅ‚Çã a‚ÇÄ‚Çã‚ÇÄ a‚ÇÄ‚Çã‚ÇÅ}
  {a‚ÇÅ‚ÇÄ‚ÇÄ a‚ÇÅ‚ÇÄ‚ÇÅ : A} {a‚ÇÅ‚ÇÄ‚Çã : a‚ÇÅ‚ÇÄ‚ÇÄ ‚â° a‚ÇÅ‚ÇÄ‚ÇÅ}
  {a‚ÇÅ‚ÇÅ‚ÇÄ a‚ÇÅ‚ÇÅ‚ÇÅ : A} {a‚ÇÅ‚ÇÅ‚Çã : a‚ÇÅ‚ÇÅ‚ÇÄ ‚â° a‚ÇÅ‚ÇÅ‚ÇÅ}
  {a‚ÇÅ‚Çã‚ÇÄ : a‚ÇÅ‚ÇÄ‚ÇÄ ‚â° a‚ÇÅ‚ÇÅ‚ÇÄ} {a‚ÇÅ‚Çã‚ÇÅ : a‚ÇÅ‚ÇÄ‚ÇÅ ‚â° a‚ÇÅ‚ÇÅ‚ÇÅ}
  {a‚ÇÅ‚Çã‚Çã : Square a‚ÇÅ‚ÇÄ‚Çã a‚ÇÅ‚ÇÅ‚Çã a‚ÇÅ‚Çã‚ÇÄ a‚ÇÅ‚Çã‚ÇÅ}
  {a‚Çã‚ÇÄ‚ÇÄ : a‚ÇÄ‚ÇÄ‚ÇÄ ‚â° a‚ÇÅ‚ÇÄ‚ÇÄ} {a‚Çã‚ÇÄ‚ÇÅ : a‚ÇÄ‚ÇÄ‚ÇÅ ‚â° a‚ÇÅ‚ÇÄ‚ÇÅ}
  {a‚Çã‚ÇÄ‚Çã : Square a‚ÇÄ‚ÇÄ‚Çã a‚ÇÅ‚ÇÄ‚Çã a‚Çã‚ÇÄ‚ÇÄ a‚Çã‚ÇÄ‚ÇÅ}
  {a‚Çã‚ÇÅ‚ÇÄ : a‚ÇÄ‚ÇÅ‚ÇÄ ‚â° a‚ÇÅ‚ÇÅ‚ÇÄ} {a‚Çã‚ÇÅ‚ÇÅ : a‚ÇÄ‚ÇÅ‚ÇÅ ‚â° a‚ÇÅ‚ÇÅ‚ÇÅ}
  {a‚Çã‚ÇÅ‚Çã : Square a‚ÇÄ‚ÇÅ‚Çã a‚ÇÅ‚ÇÅ‚Çã a‚Çã‚ÇÅ‚ÇÄ a‚Çã‚ÇÅ‚ÇÅ}
  {a‚Çã‚Çã‚ÇÄ : Square a‚ÇÄ‚Çã‚ÇÄ a‚ÇÅ‚Çã‚ÇÄ a‚Çã‚ÇÄ‚ÇÄ a‚Çã‚ÇÅ‚ÇÄ}
  {a‚Çã‚Çã‚ÇÅ : Square a‚ÇÄ‚Çã‚ÇÅ a‚ÇÅ‚Çã‚ÇÅ a‚Çã‚ÇÄ‚ÇÅ a‚Çã‚ÇÅ‚ÇÅ}
  where
  cubePermute-ijk‚Ü¶jik : Cube a‚ÇÄ‚Çã‚Çã a‚ÇÅ‚Çã‚Çã a‚Çã‚ÇÄ‚Çã a‚Çã‚ÇÅ‚Çã a‚Çã‚Çã‚ÇÄ a‚Çã‚Çã‚ÇÅ ‚Üí Cube a‚Çã‚ÇÄ‚Çã a‚Çã‚ÇÅ‚Çã a‚ÇÄ‚Çã‚Çã a‚ÇÅ‚Çã‚Çã (flipSquare a‚Çã‚Çã‚ÇÄ) (flipSquare a‚Çã‚Çã‚ÇÅ) 
  cubePermute-ijk‚Ü¶jik c i j k = c j i k

  cubePermute-ijk‚Ü¶kji : Cube a‚ÇÄ‚Çã‚Çã a‚ÇÅ‚Çã‚Çã a‚Çã‚ÇÄ‚Çã a‚Çã‚ÇÅ‚Çã a‚Çã‚Çã‚ÇÄ a‚Çã‚Çã‚ÇÅ
    ‚Üí Cube (flipSquare a‚Çã‚Çã‚ÇÄ) (flipSquare a‚Çã‚Çã‚ÇÅ) (flipSquare a‚Çã‚ÇÄ‚Çã) (flipSquare a‚Çã‚ÇÅ‚Çã) (flipSquare a‚ÇÄ‚Çã‚Çã) (flipSquare a‚ÇÅ‚Çã‚Çã)
  cubePermute-ijk‚Ü¶kji c i j k = c k j i



-- elimPushout : ‚àÄ {‚Ñì ‚Ñì' ‚Ñì'' ‚Ñì'''} {A : Type ‚Ñì} {B : Type ‚Ñì'} {C : Type ‚Ñì''} {f : A ‚Üí B} {g : A ‚Üí C}  {D : Pushout f g ‚Üí Type ‚Ñì'''}
--   (inl* : (x : B) ‚Üí D (inr* x)) (inr* : C ‚Üí D) (comm : (c : A) ‚Üí inl* (f c) ‚â° inr* (g c))
-- elimPushout = ?


PushoutRec : ‚àÄ {‚Ñì ‚Ñì' ‚Ñì'' ‚Ñì'''} {A : Type ‚Ñì} {B : Type ‚Ñì'} {C : Type ‚Ñì''} {D : Type ‚Ñì'''}
  {f : A ‚Üí B} {g : A ‚Üí C} (inl* : B ‚Üí D) (inr* : C ‚Üí D) (comm : (c : A) ‚Üí inl* (f c) ‚â° inr* (g c))
  ‚Üí Pushout f g ‚Üí D
PushoutRec inl* inr* comm (inl x) = inl* x
PushoutRec inl* inr* comm (inr x) = inr* x
PushoutRec inl* inr* comm (push a i) = comm a i

-- PushoutRec : ‚àÄ {‚Ñì ‚Ñì' ‚Ñì'' ‚Ñì'''} {A : Type ‚Ñì} {B : Type ‚Ñì'} {C : Type ‚Ñì''} {D : Type ‚Ñì'''}
--   {f : A ‚Üí B} {g : A ‚Üí C} (inl* : B ‚Üí D) (inr* : C ‚Üí D) (comm : (c : A) ‚Üí inl* (f c) ‚â° inr* (g c))
--   ‚Üí Pushout f g ‚Üí D
-- PushoutRec inl* inr* comm (inl x) = inl* x
-- PushoutRec inl* inr* comm (inr x) = inr* x
-- PushoutRec inl* inr* comm (push a i) = comm a i


open SequenceMap renaming (map to ‚à£_‚à£)
open CWskel-fields



module _ {‚Ñì : Level} (B : CWskel ‚Ñì) where
  open CWskel-fields
  open import Cubical.Foundations.Univalence
  strictifyFam : ‚Ñï ‚Üí Type ‚Ñì
  strictifyFam‚â° : (n : ‚Ñï) ‚Üí strictifyFam n ‚â° fst B n
  strictifyFame : (n : ‚Ñï) ‚Üí fst B n ‚âÉ strictifyFam n
  strictifyFamŒ± : (n : ‚Ñï) ‚Üí Fin (fst (B .snd) n) √ó S‚Åª n ‚Üí strictifyFam n
  strictifyFame2 : (n : ‚Ñï) ‚Üí (Pushout (Œ± B n) fst) ‚âÉ (Pushout (strictifyFamŒ± n) fst)
  strictifyFam zero = fst B 0
  strictifyFam (suc n) = Pushout (strictifyFamŒ± n) fst
  strictifyFamŒ± n = fst (strictifyFame n) ‚àò Œ± B n
  strictifyFame zero = idEquiv _
  strictifyFame (suc n) =
    compEquiv (e B n)
              (strictifyFame2 n)
  strictifyFame2 n =
    pushoutEquiv _ _ _ _ (idEquiv _) (strictifyFame n) (idEquiv _)
                   (Œª _ x ‚Üí fst (strictifyFame n) (Œ± B n x))
                   (Œª _ x ‚Üí fst x)
  strictifyFam‚â° zero = refl
  strictifyFam‚â° (suc n) = ua (invEquiv (strictifyFame (suc n)))

  strictCWskel : CWskel ‚Ñì
  fst strictCWskel = strictifyFam
  fst (snd strictCWskel) = card B
  fst (snd (snd strictCWskel)) = strictifyFamŒ±
  fst (snd (snd (snd strictCWskel))) = fst (snd (snd (snd B)))
  snd (snd (snd (snd strictCWskel))) = Œª _ ‚Üí idEquiv _

  strict‚â°Gen : ‚àÄ {‚Ñì ‚Ñì'} {A : Type ‚Ñì} {C D : Type ‚Ñì'} (Œ± : A ‚Üí C) (e : C ‚âÉ D) (x : A)
    ‚Üí PathP (Œª i ‚Üí ua (invEquiv e) i) (fst e (Œ± x)) (Œ± x)
  strict‚â°Gen Œ± e x i =
    hcomp (Œª k ‚Üí Œª {(i = i0) ‚Üí fst e (Œ± x)
                   ; (i = i1) ‚Üí retEq e (Œ± x) k})
          (ua-gluePt (invEquiv e) i (fst e (Œ± x)))

  strict‚â°GenT' : ‚àÄ {‚Ñì ‚Ñì' ‚Ñì''} {A : Type ‚Ñì} {B : Type ‚Ñì'} {C D : Type ‚Ñì''}
    {E : Type (‚Ñì-max ‚Ñì (‚Ñì-max ‚Ñì' ‚Ñì''))} (g : A ‚Üí B)
    (e : C ‚âÉ D)  (Œ± : A ‚Üí C) (e' : E ‚âÉ Pushout (Œª x‚ÇÅ ‚Üí Œ± x‚ÇÅ) g)
    ‚Üí PathP (Œª k ‚Üí ua (invEquiv (compEquiv {C = Pushout (fst e ‚àò Œ±) g} e'
                       (pushoutEquiv _ _ _ _ (idEquiv A) e (idEquiv B) (Œª i x ‚Üí fst e (Œ± x)) Œª i x ‚Üí g x))) k
                 ‚âÉ Pushout (Œª x‚ÇÅ ‚Üí strict‚â°Gen Œ± e x‚ÇÅ k) g)
            (idEquiv _)
            e'
  strict‚â°GenT' {A = A} {B} {C} {D} {E} g =
    EquivJ (Œª C e ‚Üí (Œ± : A ‚Üí C) (e' : E ‚âÉ Pushout (Œª x‚ÇÅ ‚Üí Œ± x‚ÇÅ) g)
    ‚Üí PathP (Œª k ‚Üí ua (invEquiv (compEquiv {C = Pushout (fst e ‚àò Œ±) g} e'
                       (pushoutEquiv _ _ _ _ (idEquiv A) e (idEquiv B) (Œª i x ‚Üí fst e (Œ± x)) Œª i x ‚Üí g x))) k
                 ‚âÉ Pushout (Œª x‚ÇÅ ‚Üí strict‚â°Gen Œ± e x‚ÇÅ k) g)
            (idEquiv _)
            e')
         Œª a ‚Üí EquivJ (Œª E e' ‚Üí PathP
      (Œª k ‚Üí
         ua
         (invEquiv
          (compEquiv e'
           (pushoutEquiv a g (Œª z ‚Üí idfun D (a z)) g (idEquiv A) (idEquiv D)
            (idEquiv B) (Œª i x ‚Üí idfun D (a x)) (Œª i ‚Üí g))))
         k
         ‚âÉ Pushout (Œª x‚ÇÅ ‚Üí strict‚â°Gen a (idEquiv D) x‚ÇÅ k) g)
      (idEquiv (Pushout (Œª x ‚Üí idfun D (a x)) g)) e')
      (Œ£PathPProp isPropIsEquiv
        (transport
          (Œª k ‚Üí PathP (Œª i
            ‚Üí (sym (lem g a) ‚àô sym (cong (ua ‚àò invEquiv) (compEquivIdEquiv ((pushoutEquiv a g
                 (Œª z ‚Üí idfun D (a z)) g (idEquiv A) (idEquiv D)
                   (idEquiv B) (Œª i‚ÇÅ x ‚Üí idfun D (a x)) (Œª i‚ÇÅ ‚Üí g)))))) k i
                             ‚Üí Pushout (Œª x‚ÇÅ ‚Üí strict‚â°GenId a x‚ÇÅ (~ k) i) g)
                 (idfun _) (idfun _))
           (funExt (main _ _))))
    where
    strict‚â°GenId : ‚àÄ {‚Ñì ‚Ñì'} {A : Type ‚Ñì} {C : Type ‚Ñì'} (Œ± : A ‚Üí C)(x : A)
                 ‚Üí strict‚â°Gen Œ± (idEquiv C) x ‚â° Œª i ‚Üí ua-gluePt (invEquiv (idEquiv C)) i (Œ± x) 
    strict‚â°GenId {C = C} Œ± x j i =
      hcomp (Œª k ‚Üí Œª {(i = i0) ‚Üí Œ± x
                     ; (i = i1) ‚Üí Œ± x
                     ; (j = i1) ‚Üí ua-gluePt (invEquiv (idEquiv C)) i (Œ± x)})
            (ua-gluePt (invEquiv (idEquiv C)) i (Œ± x))

    lem : (g : A ‚Üí B) (Œ± : A ‚Üí D)
      ‚Üí ua (invEquiv (pushoutEquiv Œ± g Œ± g (idEquiv A) (idEquiv D) (idEquiv B) refl refl))
      ‚â° refl 
    lem g a = cong ua (cong invEquiv (Œ£‚â°Prop isPropIsEquiv {v = idEquiv _}
      (funExt Œª { (inl x) ‚Üí refl ; (inr x) ‚Üí refl ; (push a i) j ‚Üí rUnit (push a) (~ j) i}))
      ‚àô invEquivIdEquiv _) ‚àô uaIdEquiv

    main : (g : A ‚Üí B) (Œ± : A ‚Üí D) (w : _)
      ‚Üí PathP (Œª i ‚Üí Pushout (Œª x‚ÇÅ ‚Üí ua-gluePt (invEquiv (idEquiv D)) i (Œ± x‚ÇÅ)) g) w w
    main g Œ± (inl x) i = inl (ua-gluePt (invEquiv (idEquiv D)) i x)
    main g Œ± (inr x) i = inr x
    main g Œ± (push a j) i = push a j

  strict‚â°Œ± : (n : ‚Ñï) (x : Fin (card B n)) (y : S‚Åª n)
    ‚Üí PathP (Œª i ‚Üí strictifyFam‚â° n i)
              
              (strictifyFamŒ± n (x , y))
              (Œ± B n (x , y))
  strict‚â°Œ± (suc n) x y = strict‚â°Gen (Œ± B (suc n)) (strictifyFame (suc n)) (x , y)
  
  strict‚â°e : (n : ‚Ñï) ‚Üí PathP (Œª i ‚Üí strictifyFam‚â° (suc n) i
                                     ‚âÉ Pushout (Œª x ‚Üí strict‚â°Œ± n (fst x) (snd x) i) fst)
                               (idEquiv _)
                               (e B n)
  strict‚â°e zero = Œ£PathPProp (Œª _ ‚Üí isPropIsEquiv _)
    (symP (toPathP (funExt Œª { (inl x) ‚Üí ‚ä•.rec (B .snd .snd .snd .fst x)
      ; (inr x) ‚Üí cong (transport (Œª i ‚Üí Pushout (Œª x‚ÇÅ ‚Üí strict‚â°Œ± zero (fst x‚ÇÅ) (snd x‚ÇÅ) (~ i)) fst))
                         ((cong (e B 0 .fst) (transportRefl (invEq (e B 0) (inr x)))
                         ‚àô secEq (e B 0) (inr x)))
                     ‚àô Œª j ‚Üí inr (transportRefl x j)})))
  strict‚â°e (suc n) = strict‚â°GenT' fst (strictifyFame (suc n)) (Œ± B (suc n)) (e B (suc n))    

  strict‚â° : strictCWskel ‚â° B
  fst (strict‚â° i) n = strictifyFam‚â° n i
  fst (snd (strict‚â° i)) = card B
  fst (snd (snd (strict‚â° i))) n (x , y) = strict‚â°Œ± n x y i
  fst (snd (snd (snd (strict‚â° i)))) = fst (snd (snd (snd B)))
  snd (snd (snd (snd (strict‚â° i)))) n = strict‚â°e n i


module _ {‚Ñì ‚Ñì'} {P : CWskel ‚Ñì ‚Üí Type ‚Ñì'} (e : (B : CWskel ‚Ñì) ‚Üí P (strictCWskel B)) where
  elimStrictCW : (B : _) ‚Üí P B
  elimStrictCW B = subst P (strict‚â° B) (e B)

  elimStrictCWŒ≤ : (B : _) ‚Üí elimStrictCW (strictCWskel B) ‚â° e B
  elimStrictCWŒ≤ B =
    (Œª j ‚Üí subst P (Œª i ‚Üí H strictCWskel (funExt (Œª x ‚Üí sym (strict‚â° x))) B i j) (e (strict‚â° B j)))
    ‚àô transportRefl (e B)
    where
    H : ‚àÄ {‚Ñì} {A : Type ‚Ñì}  (F : A ‚Üí A) (s : (Œª x ‚Üí x) ‚â° F) (a : A)
      ‚Üí Square (Œª i ‚Üí F (s (~ i) a)) refl (Œª i ‚Üí s (~ i) (F a)) refl
    H = J> Œª _ ‚Üí refl


module _ {‚Ñì ‚Ñì'} {C : CWskel ‚Ñì} {D : CWskel ‚Ñì'} (f : cellMap (strictCWskel C) (strictCWskel D)) where

  mutual
    strictMapFun : (n : ‚Ñï) ‚Üí strictifyFam C n ‚Üí strictifyFam D n
    strictMapComm : (n : ‚Ñï) (x : strictifyFam C n) ‚Üí
        strictMapFun n x ‚â° ‚à£ f ‚à£ n x
    strictMapFun zero x = ‚à£ f ‚à£ 0 x
    strictMapFun (suc n) (inl x) = inl (strictMapFun n x)
    strictMapFun (suc n) (inr x) = ‚à£ f ‚à£ (suc n) (inr x)
    strictMapFun (suc (suc n)) (push c i) =
      (((Œª i ‚Üí inl (strictMapComm (suc n) (Œ± (strictCWskel C) (suc n) c) i))
          ‚àô comm f (suc n) (Œ± (strictCWskel C) (suc n) c))
          ‚àô cong (‚à£ f ‚à£ (suc (suc n))) (push c)) i
    strictMapComm zero x = refl
    strictMapComm (suc n) (inl x) = (Œª i ‚Üí inl (strictMapComm n x i)) ‚àô comm f n x
    strictMapComm (suc n) (inr x) = refl
    strictMapComm (suc (suc n)) (push c i) j =
      compPath-filler' ((Œª i ‚Üí inl (strictMapComm (suc n) (Œ± (strictCWskel C) (suc n) c) i))
          ‚àô comm f (suc n) (Œ± (strictCWskel C) (suc n) c))
          (cong (‚à£ f ‚à£ (suc (suc n))) (push c)) (~ j) i


  strictCwMap : cellMap (strictCWskel C) (strictCWskel D)
  SequenceMap.map strictCwMap = strictMapFun
  SequenceMap.comm strictCwMap n x = refl

  strictCwMap‚â° : strictCwMap ‚â° f
  ‚à£_‚à£ (strictCwMap‚â° i) n x = strictMapComm n x i
  comm (strictCwMap‚â° i) n x j =
   compPath-filler ((Œª i‚ÇÅ ‚Üí inl (strictMapComm n x i‚ÇÅ))) (comm f n x) j i




cong-hcomp : ‚àÄ {‚Ñì ‚Ñì'} {A : Type ‚Ñì} {B : Type ‚Ñì'}
  (f : A ‚Üí B)
  {a‚ÇÄ‚ÇÄ‚ÇÄ a‚ÇÄ‚ÇÄ‚ÇÅ : A} {a‚ÇÄ‚ÇÄ‚Çã : a‚ÇÄ‚ÇÄ‚ÇÄ ‚â° a‚ÇÄ‚ÇÄ‚ÇÅ}
  {a‚ÇÄ‚ÇÅ‚ÇÄ a‚ÇÄ‚ÇÅ‚ÇÅ : A} {a‚ÇÄ‚ÇÅ‚Çã : a‚ÇÄ‚ÇÅ‚ÇÄ ‚â° a‚ÇÄ‚ÇÅ‚ÇÅ}
  {a‚ÇÄ‚Çã‚ÇÄ : a‚ÇÄ‚ÇÄ‚ÇÄ ‚â° a‚ÇÄ‚ÇÅ‚ÇÄ} {a‚ÇÄ‚Çã‚ÇÅ : a‚ÇÄ‚ÇÄ‚ÇÅ ‚â° a‚ÇÄ‚ÇÅ‚ÇÅ}
  {a‚ÇÄ‚Çã‚Çã : Square a‚ÇÄ‚ÇÄ‚Çã a‚ÇÄ‚ÇÅ‚Çã a‚ÇÄ‚Çã‚ÇÄ a‚ÇÄ‚Çã‚ÇÅ}
  {a‚ÇÅ‚ÇÄ‚ÇÄ a‚ÇÅ‚ÇÄ‚ÇÅ : A} {a‚ÇÅ‚ÇÄ‚Çã : a‚ÇÅ‚ÇÄ‚ÇÄ ‚â° a‚ÇÅ‚ÇÄ‚ÇÅ}
  {a‚ÇÅ‚ÇÅ‚ÇÄ a‚ÇÅ‚ÇÅ‚ÇÅ : A} {a‚ÇÅ‚ÇÅ‚Çã : a‚ÇÅ‚ÇÅ‚ÇÄ ‚â° a‚ÇÅ‚ÇÅ‚ÇÅ}
  {a‚ÇÅ‚Çã‚ÇÄ : a‚ÇÅ‚ÇÄ‚ÇÄ ‚â° a‚ÇÅ‚ÇÅ‚ÇÄ} {a‚ÇÅ‚Çã‚ÇÅ : a‚ÇÅ‚ÇÄ‚ÇÅ ‚â° a‚ÇÅ‚ÇÅ‚ÇÅ}
  {a‚Çã‚ÇÄ‚ÇÄ : a‚ÇÄ‚ÇÄ‚ÇÄ ‚â° a‚ÇÅ‚ÇÄ‚ÇÄ} {a‚Çã‚ÇÄ‚ÇÅ : a‚ÇÄ‚ÇÄ‚ÇÅ ‚â° a‚ÇÅ‚ÇÄ‚ÇÅ}
  {a‚Çã‚ÇÄ‚Çã : Square a‚ÇÄ‚ÇÄ‚Çã a‚ÇÅ‚ÇÄ‚Çã a‚Çã‚ÇÄ‚ÇÄ a‚Çã‚ÇÄ‚ÇÅ}
  {a‚Çã‚ÇÅ‚ÇÄ : a‚ÇÄ‚ÇÅ‚ÇÄ ‚â° a‚ÇÅ‚ÇÅ‚ÇÄ} {a‚Çã‚ÇÅ‚ÇÅ : a‚ÇÄ‚ÇÅ‚ÇÅ ‚â° a‚ÇÅ‚ÇÅ‚ÇÅ}
  {a‚Çã‚ÇÅ‚Çã : Square a‚ÇÄ‚ÇÅ‚Çã a‚ÇÅ‚ÇÅ‚Çã a‚Çã‚ÇÅ‚ÇÄ a‚Çã‚ÇÅ‚ÇÅ}
  {a‚Çã‚Çã‚ÇÄ : Square a‚ÇÄ‚Çã‚ÇÄ a‚ÇÅ‚Çã‚ÇÄ a‚Çã‚ÇÄ‚ÇÄ a‚Çã‚ÇÅ‚ÇÄ}
  {a‚Çã‚Çã‚ÇÅ : Square a‚ÇÄ‚Çã‚ÇÅ a‚ÇÅ‚Çã‚ÇÅ a‚Çã‚ÇÄ‚ÇÅ a‚Çã‚ÇÅ‚ÇÅ}
  ‚Üí Cube (Œª i j ‚Üí f (hcomp (Œª k ‚Üí Œª {(i = i0) ‚Üí a‚Çã‚ÇÄ‚Çã k j
                                      ; (i = i1) ‚Üí a‚Çã‚ÇÅ‚Çã k j
                                      ; (j = i0) ‚Üí a‚Çã‚Çã‚ÇÄ k i
                                      ; (j = i1) ‚Üí a‚Çã‚Çã‚ÇÅ k i})
                             (a‚ÇÄ‚Çã‚Çã i j)))
         (Œª i j ‚Üí hcomp (Œª k ‚Üí Œª {(i = i0) ‚Üí f (a‚Çã‚ÇÄ‚Çã k j)
                                      ; (i = i1) ‚Üí f (a‚Çã‚ÇÅ‚Çã k j)
                                      ; (j = i0) ‚Üí f (a‚Çã‚Çã‚ÇÄ k i)
                                      ; (j = i1) ‚Üí f (a‚Çã‚Çã‚ÇÅ k i)})
                             (f (a‚ÇÄ‚Çã‚Çã i j)))
          (Œª i j ‚Üí f (a‚ÇÅ‚ÇÄ‚Çã j)) (Œª _ j ‚Üí f (a‚ÇÅ‚ÇÅ‚Çã j))
          (Œª _ i ‚Üí f (a‚ÇÅ‚Çã‚ÇÄ i)) Œª _ i ‚Üí f (a‚ÇÅ‚Çã‚ÇÅ i)
cong-hcomp f {a‚ÇÄ‚Çã‚Çã = a‚ÇÄ‚Çã‚Çã}  {a‚Çã‚ÇÄ‚Çã = a‚Çã‚ÇÄ‚Çã} {a‚Çã‚ÇÅ‚Çã = a‚Çã‚ÇÅ‚Çã} {a‚Çã‚Çã‚ÇÄ = a‚Çã‚Çã‚ÇÄ} {a‚Çã‚Çã‚ÇÅ = a‚Çã‚Çã‚ÇÅ} r i j =
  hcomp (Œª k ‚Üí Œª {(i = i0) ‚Üí f (a‚Çã‚ÇÄ‚Çã k j)
                 ; (i = i1) ‚Üí f (a‚Çã‚ÇÅ‚Çã k j)
                 ; (j = i0) ‚Üí f (a‚Çã‚Çã‚ÇÄ k i)
                 ; (j = i1) ‚Üí f (a‚Çã‚Çã‚ÇÅ k i)
                 ; (r = i0) ‚Üí f (hfill (Œª k ‚Üí Œª {(i = i0) ‚Üí a‚Çã‚ÇÄ‚Çã k j
                                      ; (i = i1) ‚Üí a‚Çã‚ÇÅ‚Çã k j
                                      ; (j = i0) ‚Üí a‚Çã‚Çã‚ÇÄ k i
                                      ; (j = i1) ‚Üí a‚Çã‚Çã‚ÇÅ k i})
                             (inS (a‚ÇÄ‚Çã‚Çã i j)) k)})
        ((f (a‚ÇÄ‚Çã‚Çã i j)))

cong-invSides-filler : ‚àÄ {‚Ñì ‚Ñì'} {A : Type ‚Ñì} {B : Type ‚Ñì'}
  (f : A ‚Üí B) {x y z : A} (p : x ‚â° y) (q : x ‚â° z)
  ‚Üí (Œª i j ‚Üí f (invSides-filler p q i j)) ‚â° (invSides-filler (cong f p) (cong f q))
cong-invSides-filler f p q = cong-hcomp f



invSides-filler-filler : ‚àÄ {‚Ñì} {A : Type ‚Ñì} {x y z : A} (p : x ‚â° y) (q : x ‚â° z) (i j k : I) ‚Üí A
invSides-filler-filler {x = x} p q i j k =
  hfill (Œª k ‚Üí Œª { (i = i0) ‚Üí p (k ‚àß j)
                 ; (i = i1) ‚Üí q (~ j ‚àß k)
                 ; (j = i0) ‚Üí q (i ‚àß k)
                 ; (j = i1) ‚Üí p (~ i ‚àß k)})
       (inS x) k


private
  pathlem : ‚àÄ {‚Ñì} {A : Type ‚Ñì} {x : A}  (Fx : x ‚â° x) (Fpt : refl ‚â° Fx) (p q : Fx ‚â° Fx)
     ‚Üí Square (rUnit Fx ‚àô cong (Fx ‚àô_) Fpt)
               (rUnit Fx ‚àô cong (Fx ‚àô_) Fpt)
               (p ‚àô q) (cong‚ÇÇ _‚àô_ p q)
  pathlem = J> Œª p q ‚Üí sym (rUnit _)
    ‚óÅ flipSquare (((Œª i ‚Üí (Œª j ‚Üí rUnit (p j) i) ‚àô Œª j ‚Üí lUnit (q j) i)
    ‚ñ∑ sym (cong‚ÇÇFunct _‚àô_ p q)))
    ‚ñ∑ rUnit _

‚ãÅ‚ÜíHomogeneous‚â° : ‚àÄ {‚Ñì ‚Ñì' ‚Ñì''} {A : Type ‚Ñì} {B : A ‚Üí Pointed ‚Ñì'} {C : Type ‚Ñì''}
  (f g : ‚ãÅgen A B ‚Üí C) ‚Üí ((x : C) ‚Üí isHomogeneous (C , x))
  ‚Üí f (inl tt) ‚â° g (inl tt)
  ‚Üí ((x : _) ‚Üí f (inr x) ‚â° g (inr x))
  ‚Üí (x : _) ‚Üí f x ‚â° g x
‚ãÅ‚ÜíHomogeneous‚â° {A = A} {B = B}{C = C} f g hom p q = funExt‚Åª (cong fst main)
  where
  ptC = f (inl tt)

  f' g' : ‚ãÅgen‚àô A B ‚Üí‚àô (C , ptC)
  f' = f , refl
  g' = g , sym p

  ‚ãÅ‚ÜíIso : ‚àÄ {‚Ñì} (C : Pointed ‚Ñì) ‚Üí Iso (‚ãÅgen‚àô A B ‚Üí‚àô C) ((x : A) ‚Üí B x ‚Üí‚àô C)
  fst (Iso.fun (‚ãÅ‚ÜíIso C) f x) y = fst f (inr (x , y))
  snd (Iso.fun (‚ãÅ‚ÜíIso C) f x) = cong (fst f) (sym (push x)) ‚àô snd f
  fst (Iso.inv (‚ãÅ‚ÜíIso C) f) (inl x) = pt C
  fst (Iso.inv (‚ãÅ‚ÜíIso C) f) (inr (x , y)) = f x .fst y 
  fst (Iso.inv (‚ãÅ‚ÜíIso C) f) (push a i) = f a .snd (~ i)
  snd (Iso.inv (‚ãÅ‚ÜíIso C) f) = refl
  Iso.rightInv (‚ãÅ‚ÜíIso C) f = funExt Œª x ‚Üí Œ£PathP (refl , sym (rUnit _))
  Iso.leftInv (‚ãÅ‚ÜíIso C) f =
    Œ£PathP ((funExt (Œª { (inl x) ‚Üí sym (snd f) ; (inr x) ‚Üí refl
      ; (push a i) j ‚Üí compPath-filler (cong (fst f) (sym (push a))) (snd f) (~ j) (~ i)}))
      , Œª i j ‚Üí snd f (~ i ‚à® j))

  main : f' ‚â° g'
  main = sym (Iso.leftInv (‚ãÅ‚ÜíIso (C , ptC)) f')
       ‚àô‚àô cong (Iso.inv (‚ãÅ‚ÜíIso (C , ptC))) (funExt (Œª x ‚Üí ‚Üí‚àôHomogeneous‚â° (hom _) (funExt (Œª y ‚Üí q (x , y)))))
       ‚àô‚àô Iso.leftInv (‚ãÅ‚ÜíIso (C , ptC)) g'

-- module _ {‚Ñì ‚Ñì' : Level} where
--   Pushout‚ÜíBouquet' : {C‚Çô C‚Çô‚Çä‚ÇÅ C‚Çô‚Çä‚ÇÇ : Type ‚Ñì} (n m‚Çô m‚Çô‚Çä‚ÇÅ : ‚Ñï)
--     (Œ±‚Çô‚Çä‚ÇÅ : Fin m‚Çô‚Çä‚ÇÅ √ó S‚Çä n ‚Üí C‚Çô‚Çä‚ÇÅ)
--     (Œ±‚Çô : Fin m‚Çô √ó S‚Åª n ‚Üí C‚Çô)
--     (e : C‚Çô‚Çä‚ÇÅ ‚âÉ Pushout Œ±‚Çô fst)
--     (e2 : C‚Çô‚Çä‚ÇÇ ‚âÉ Pushout Œ±‚Çô‚Çä‚ÇÅ fst)
--     ‚Üí (a : Fin m‚Çô‚Çä‚ÇÅ √ó S‚Çä n) ‚Üí SphereBouquet n (Fin m‚Çô)
--   Pushout‚ÜíBouquet' zero m‚Çô m‚Çô‚Çä‚ÇÅ Œ±‚Çô‚Çä‚ÇÅ Œ±‚Çô e e2 a = {!!}
--   Pushout‚ÜíBouquet' (suc zero) m‚Çô m‚Çô‚Çä‚ÇÅ Œ±‚Çô‚Çä‚ÇÅ Œ±‚Çô e e2 (l , base) = inl tt
--   Pushout‚ÜíBouquet' (suc zero) m‚Çô m‚Çô‚Çä‚ÇÅ Œ±‚Çô‚Çä‚ÇÅ Œ±‚Çô e e2 (l , loop i) = ({!!} ‚àô‚àô {!Œª i ‚Üí ?!} ‚àô‚àô {!!}) i
--   Pushout‚ÜíBouquet' (suc (suc n)) m‚Çô m‚Çô‚Çä‚ÇÅ Œ±‚Çô‚Çä‚ÇÅ Œ±‚Çô e e2 a = {!!}
--   -- inr {!!}

--   Pushout‚ÜíBouquetEq : {C‚Çô C‚Çô‚Çä‚ÇÅ C‚Çô‚Çä‚ÇÇ : Type ‚Ñì} (n m‚Çô m‚Çô‚Çä‚ÇÅ : ‚Ñï)
--     (Œ±‚Çô‚Çä‚ÇÅ : Fin m‚Çô‚Çä‚ÇÅ √ó S‚Çä n ‚Üí C‚Çô‚Çä‚ÇÅ)
--     (Œ±‚Çô : Fin m‚Çô √ó S‚Åª n ‚Üí C‚Çô)
--     (e : C‚Çô‚Çä‚ÇÅ ‚âÉ Pushout Œ±‚Çô fst)
--     (e2 : C‚Çô‚Çä‚ÇÇ ‚âÉ Pushout Œ±‚Çô‚Çä‚ÇÅ fst)
--     (t : _) (s : _)
--     ‚Üí Pushout‚ÜíBouquet {C‚Çô = C‚Çô} {C‚Çô‚Çä‚ÇÅ} n m‚Çô Œ±‚Çô e (fst e (Œ±‚Çô‚Çä‚ÇÅ (t , s)))
--     ‚â° {!Pushout‚ÜíBouquet!}
--   Pushout‚ÜíBouquetEq n m‚Çô Œ±‚Çô e = {!!}
{-
-- Maps back and forth
module BouquetFuns {C‚Çô C‚Çô‚Çä‚ÇÅ : Type ‚Ñì} (n m‚Çô : ‚Ñï)
    (Œ±‚Çô : Fin m‚Çô √ó S‚Åª n ‚Üí C‚Çô)
    (e : C‚Çô‚Çä‚ÇÅ ‚âÉ Pushout Œ±‚Çô fst) where
  CTB : cofib (invEq e ‚àò inl) ‚Üí SphereBouquet n (Fin m‚Çô)
  CTB (inl x) = inl tt
  CTB (inr x) = Pushout‚ÜíBouquet n m‚Çô Œ±‚Çô e (fst e x)
  CTB (push a i) = Pushout‚ÜíBouquet n m‚Çô Œ±‚Çô e (secEq e (inl a) (~ i))
-}


module _ {‚Ñì ‚Ñì'} {A : Pointed ‚Ñì} {B : Pointed ‚Ñì'} where
  foldL : A ‚ãÅ B ‚Üí fst A
  foldL (inl x) = x
  foldL (inr x) = pt A
  foldL (push a i) = pt A

  foldL‚àô : (A ‚ãÅ‚àô‚Çó B) ‚Üí‚àô A
  fst foldL‚àô = foldL
  snd foldL‚àô = refl
  
  foldR : A ‚ãÅ B ‚Üí fst B
  foldR (inl x) = pt B
  foldR (inr x) = x
  foldR (push a i) = pt B

  foldR‚àô : (A ‚ãÅ‚àô‚Çó B) ‚Üí‚àô B
  fst foldR‚àô = foldR
  snd foldR‚àô = refl

cellMap‚ÜífinCellMap : ‚àÄ {‚Ñì ‚Ñì'} (m : ‚Ñï) {C : CWskel ‚Ñì} {D : CWskel ‚Ñì'} (œï : cellMap C D) ‚Üí finCellMap m C D
FinSequenceMap.fmap (cellMap‚ÜífinCellMap m œï) (x , p) = SequenceMap.map œï x
FinSequenceMap.fcomm (cellMap‚ÜífinCellMap m œï) (x , p) = SequenceMap.comm œï x





module _ {‚Ñì : Level} {B' C' D' : CWskel ‚Ñì}
  (f' : cellMap (strictCWskel B') (strictCWskel C'))
  (g' : cellMap (strictCWskel B') (strictCWskel D')) where
  private
    B = strictCWskel B'
    C = strictCWskel C'
    D = strictCWskel D'
    f = strictCwMap f'
    g = strictCwMap g'


  open LoicPush ‚Ñì B C D f g


--  pushoutIso‚Çõ : (n : ‚Ñï) ‚Üí Iso (strictPushout n) (Pushout (pushoutMap‚Çõ n) fst)
--  pushoutIso‚Çõ n = iso (pushoutIso‚Çõ-fun n) (pushoutIso‚Çõ-inv n) (pushoutIso‚Çõ-rightInv n) (pushoutIso‚Çõ-leftInv n)



  open import Cubical.Foundations.Equiv.HalfAdjoint
  -- module _ (E' : CWskel ‚Ñì) (n : ‚Ñï) where
  --   private
  --     E = strictCWskel E'

  --     HA : (n : ‚Ñï) ‚Üí _ 
  --     HA n = equiv‚ÜíHAEquiv (isoToEquiv (IsoSphereSusp n))

  --     IsoSphereSusp' : (n : ‚Ñï) ‚Üí Iso _ _
  --     IsoSphereSusp' n = isHAEquiv‚ÜíIso (HA n .snd)

  --   strict¬≤A‚Üí : (strict¬≤A E' (2+ n)) ‚Üí (fst E (suc (suc n)))
  --   strict¬≤A‚Üí (inl x) = inl x
  --   strict¬≤A‚Üí (inr x) = inr x
  --   strict¬≤A‚Üí (push a i) = push ((fst a) , Iso.inv (IsoSphereSusp n) (snd a)) i

  --   strict¬≤A‚Üê : (fst E (suc (suc n))) ‚Üí (strict¬≤A E' (2+ n)) 
  --   strict¬≤A‚Üê (inl x) = inl x
  --   strict¬≤A‚Üê (inr x) = inr x
  --   strict¬≤A‚Üê (push a i) =
  --     ((Œª i ‚Üí inl (Œ± E  (suc n) (fst a , Iso.leftInv (IsoSphereSusp' n) (snd a) (~ i))))
  --     ‚àô push ((fst a) , Iso.fun (IsoSphereSusp n) (snd a))) i

  --   strictPushoutIso : Iso (strict¬≤A E' (2+ n))  (fst E (suc (suc n)))
  --   Iso.fun strictPushoutIso = strict¬≤A‚Üí
  --   Iso.inv strictPushoutIso = strict¬≤A‚Üê
  --   Iso.rightInv strictPushoutIso (inl x) = refl
  --   Iso.rightInv strictPushoutIso (inr x) = refl
  --   Iso.rightInv strictPushoutIso (push a i) j = h j i
  --     where
  --     h : cong strict¬≤A‚Üí (cong (Iso.inv strictPushoutIso) (push a)) ‚â° push a
  --     h = cong-‚àô strict¬≤A‚Üí (Œª i ‚Üí inl (Œ± E (suc n) (fst a
  --                       , Iso.leftInv (IsoSphereSusp' n) (snd a) (~ i))))
  --         (push (fst a , Iso.fun (IsoSphereSusp n) (snd a)))
  --         ‚àô (Œª i ‚Üí (Œª j ‚Üí inl (Œ± E (suc n) ((fst a)
  --                  , (Iso.leftInv (IsoSphereSusp' n) (snd a) (i ‚à® ~ j)))))
  --                 ‚àô push (fst a , Iso.leftInv (IsoSphereSusp' n) (snd a) i))
  --         ‚àô sym (lUnit _)

  --   Iso.leftInv strictPushoutIso (inl x) = refl
  --   Iso.leftInv strictPushoutIso (inr x) = refl
  --   Iso.leftInv strictPushoutIso (push a i) j = help j i -- 
  --     where
  --     PP : Square (Œª _ ‚Üí Iso.inv (IsoSphereSusp n) (snd a)) (Œª i ‚Üí Iso.inv (IsoSphereSusp n) (Iso.rightInv (IsoSphereSusp' n) (snd a) i))
  --                 (sym (Iso.leftInv (IsoSphereSusp' n) (Iso.inv (IsoSphereSusp' n) (snd a)))) refl
  --     PP = (Œª i j ‚Üí Iso.leftInv (IsoSphereSusp' n) (Iso.inv (IsoSphereSusp' n) (snd a)) (~ i ‚à® j))
  --        ‚ñ∑ sym (isHAEquiv.com-op (snd (HA n)) (snd a))

  --     help : Path (Path (strict¬≤A E' (2+ n)) _ _) (cong strict¬≤A‚Üê (push (fst a , Iso.inv (IsoSphereSusp n) (snd a)))) (push a) 
  --     help = (Œª i ‚Üí (Œª j ‚Üí inl (Œ± E (suc n) ((fst a) , PP j i)))
  --                   ‚àô push (fst a , Iso.rightInv (IsoSphereSusp' n) (snd a) i))
  --          ‚àô sym (lUnit _)


  pushoutA* : ‚Ñï ‚Üí Type ‚Ñì
  pushoutA* zero = B .fst zero
  pushoutA* (suc n) = Pushout {A = B .fst n} {B = fst C (suc n)} {C = fst D (suc n)} (inl ‚àò ‚à£ f ‚à£ n) (inl ‚àò ‚à£ g ‚à£ n)

  bEq : (n : ‚Ñï) ‚Üí Iso (B .fst (suc n))  (strictA B (suc n))
  Iso.fun (bEq n) x = x
  Iso.inv (bEq n) x = x
  Iso.rightInv (bEq n) x = refl
  Iso.leftInv (bEq n) x = refl
  -- pushoutEquiv _ _ _ _ (idEquiv _) (idEquiv _) (idEquiv _) (Œª _ x ‚Üí Œ± B n x) Œª i x ‚Üí fst x


  open import Cubical.Foundations.Equiv.HalfAdjoint
  module _ (E' : CWskel ‚Ñì) (n : ‚Ñï) where
    private
      E = strictCWskel E'

      HA : (n : ‚Ñï) ‚Üí _ 
      HA n = equiv‚ÜíHAEquiv (isoToEquiv (IsoSphereSusp n))

      IsoSphereSusp' : (n : ‚Ñï) ‚Üí Iso _ _
      IsoSphereSusp' n = isHAEquiv‚ÜíIso (HA n .snd)

    strict¬≤A‚Üí : (strict¬≤A E (2+ n)) ‚Üí (fst E (suc (suc n)))
    strict¬≤A‚Üí (inl x) = inl x
    strict¬≤A‚Üí (inr x) = inr x
    strict¬≤A‚Üí (push a i) = push ((fst a) , Iso.inv (IsoSphereSusp n) (snd a)) i

    strict¬≤A‚Üê : (fst E (suc (suc n))) ‚Üí (strict¬≤A E (2+ n)) 
    strict¬≤A‚Üê (inl x) = inl x
    strict¬≤A‚Üê (inr x) = inr x
    strict¬≤A‚Üê (push a i) =
      ((Œª i ‚Üí inl (Œ± E  (suc n) (fst a , Iso.leftInv (IsoSphereSusp' n) (snd a) (~ i))))
      ‚àô push ((fst a) , Iso.fun (IsoSphereSusp n) (snd a))) i

    strictPushoutIso : Iso (strict¬≤A E (2+ n))  (fst E (suc (suc n)))
    Iso.fun strictPushoutIso = strict¬≤A‚Üí
    Iso.inv strictPushoutIso = strict¬≤A‚Üê
    Iso.rightInv strictPushoutIso (inl x) = refl
    Iso.rightInv strictPushoutIso (inr x) = refl
    Iso.rightInv strictPushoutIso (push a i) j = h j i
      where
      h : cong strict¬≤A‚Üí (cong (Iso.inv strictPushoutIso) (push a)) ‚â° push a
      h = cong-‚àô strict¬≤A‚Üí (Œª i ‚Üí inl (Œ± E (suc n) (fst a
                        , Iso.leftInv (IsoSphereSusp' n) (snd a) (~ i))))
          (push (fst a , Iso.fun (IsoSphereSusp n) (snd a)))
          ‚àô (Œª i ‚Üí (Œª j ‚Üí inl (Œ± E (suc n) ((fst a)
                   , (Iso.leftInv (IsoSphereSusp' n) (snd a) (i ‚à® ~ j)))))
                  ‚àô push (fst a , Iso.leftInv (IsoSphereSusp' n) (snd a) i))
          ‚àô sym (lUnit _)

    Iso.leftInv strictPushoutIso (inl x) = refl
    Iso.leftInv strictPushoutIso (inr x) = refl
    Iso.leftInv strictPushoutIso (push a i) j = help j i -- 
      where
      PP : Square (Œª _ ‚Üí Iso.inv (IsoSphereSusp n) (snd a)) (Œª i ‚Üí Iso.inv (IsoSphereSusp n) (Iso.rightInv (IsoSphereSusp' n) (snd a) i))
                  (sym (Iso.leftInv (IsoSphereSusp' n) (Iso.inv (IsoSphereSusp' n) (snd a)))) refl
      PP = (Œª i j ‚Üí Iso.leftInv (IsoSphereSusp' n) (Iso.inv (IsoSphereSusp' n) (snd a)) (~ i ‚à® j))
         ‚ñ∑ sym (isHAEquiv.com-op (snd (HA n)) (snd a))

      help : Path (Path (strict¬≤A E (2+ n)) _ _) (cong strict¬≤A‚Üê (push (fst a , Iso.inv (IsoSphereSusp n) (snd a)))) (push a) 
      help = (Œª i ‚Üí (Œª j ‚Üí inl (Œ± E (suc n) ((fst a) , PP j i)))
                    ‚àô push (fst a , Iso.rightInv (IsoSphereSusp' n) (snd a) i))
           ‚àô sym (lUnit _)

  strictPushoutIsoL : (n : ‚Ñï) ‚Üí Iso  (strict¬≤A C (2+ n)) (fst C (suc (suc n)))
  strictPushoutIsoL n = strictPushoutIso C' n

  strictPushoutIsoR : (n : ‚Ñï) ‚Üí Iso  (strict¬≤A D (2+ n)) (fst D (suc (suc n)))
  strictPushoutIsoR n = strictPushoutIso D' n


  -- strictPushoutIsoR : (n : ‚Ñï) ‚Üí Iso  (strict¬≤A D' (2+ n)) (fst D (suc (suc n)))
  -- strictPushoutIsoR n = {!!} -- strictPushoutIso D' n


  cohL : (n : ‚Ñï) (x : B .fst (suc n)) ‚Üí strictMap f (suc n) x ‚â° strictMapFun f' (suc n) x
  cohL n (inl x) = refl
  cohL n (inr x) = refl
  cohL n (push a i) j = lUnit (cong (strictMapFun f' (suc n)) (push a)) (~ j) i

  cohR : (n : ‚Ñï) (x : B .fst (suc n)) ‚Üí strictMap g (suc n) x ‚â° strictMapFun g' (suc n) x
  cohR n (inl x) = refl
  cohR n (inr x) = refl
  cohR n (push a i) j = lUnit (cong (strictMapFun g' (suc n)) (push a)) (~ j) i

  strictPushoutA*Iso : (n : ‚Ñï) ‚Üí Iso (pushoutA* (suc (suc n))) (strictPushout n)
  strictPushoutA*Iso n = {!!}
  {- pushoutIso _ _ _ _ (idEquiv _)
    (invEquiv (isoToEquiv (strictPushoutIsoL n))) (invEquiv (isoToEquiv (strictPushoutIsoR n)))
      (funExt (cohL n)) (funExt (cohR n))
-}
  
  strictPushoutA*Iso' : (n : ‚Ñï) ‚Üí Iso  (strictPushout n) (pushoutA* (suc (suc n)))
  strictPushoutA*Iso' n = pushoutIso _ _ _ _ (idEquiv _)
    ( (isoToEquiv (strictPushoutIsoL n))) ( (isoToEquiv (strictPushoutIsoR n)))
      (Œª i x ‚Üí inl (cohL n x i)) Œª i x ‚Üí inl (cohR n x i)

  -- strictPushoutA*Iso'altFun : (n : ‚Ñï) ‚Üí  (strictPushout n) ‚Üí (pushoutA* (suc (suc n)))
  -- strictPushoutA*Iso'altFun n (inl x) = {!Iso.fun (strictPushoutIsoL n)!}
  -- strictPushoutA*Iso'altFun n (inr x) = {!!}
  -- strictPushoutA*Iso'altFun n (push a i) = {!!}


  -- myMap : (n : ‚Ñï) ‚Üí pushoutA* (suc (suc n)) ‚Üí Pushout (pushoutMap‚Çõ n) fst
  -- myMap n (inl (inl x)) = inl (inl x)
  -- myMap n (inl (inr x)) = inr (inl (inl x))
  -- myMap zero (inl (push (a , false) i)) =  push (inl (inl a) , south) i
  -- myMap zero (inl (push (a , true) i)) =  push (inl (inl a) , north) i
  -- myMap (suc zero) (inl (push (a , b) i)) = {!!}
  -- myMap (suc (suc n)) (inl (push (a , b) i)) = push (inl (inl a) , b) i
  -- myMap n (inr (inl x)) = inl (inr x)
  -- myMap n (inr (inr x)) = inr (inr x)
  -- myMap zero (inr (push (a , false) i)) = push (inr a , south) i
  -- myMap zero (inr (push (a , true) i)) = push (inr a , north) i
  -- myMap (suc zero) (inr (push (a , b) i)) =
  --   ((Œª j ‚Üí inl (inr (Œ± D 2 (a , S¬π‚ÜíSuspBool‚ÜíS¬π b (~ j)))))
  --   ‚àô push (inr a , Iso.fun (IsoSphereSusp 1) b)) i
  -- myMap (suc (suc n)) (inr (push (a , b) i)) = push (inr a , b) i
  -- myMap n (push (inl x) i) = inl (push x i)
  -- myMap n (push (inr x) i) = inl {!!} -- ((push (inl (inr x) , north) ‚àô‚àô refl ‚àô‚àô (Œª i ‚Üí push (inl (inr x) , south) (~ i)))) i
  -- myMap n (push (push a i‚ÇÅ) i) = {!!}

  pushoutMap‚Çõ* : (n : ‚Ñï) ‚Üí (((A C (suc n)) ‚äé (A B n)) ‚äé (A D (suc n))) √ó (Susp (S‚Åª n)) ‚Üí pushoutA* (suc n)
  pushoutMap‚Çõ* n = pushoutMap‚Çõ n


  CardPush : (n : ‚Ñï) ‚Üí Type
  CardPush zero = ((A C zero)) ‚äé (A D zero)
  CardPush (suc n) = ((A C (suc n)) ‚äé (A B n)) ‚äé (A D (suc n))

  S' : (n : ‚Ñï) ‚Üí Type
  S' zero = ‚ä•
  S' (suc n) = Susp (S‚Åª n)

  pushoutMap‚Çõfull : (n : ‚Ñï) ‚Üí CardPush n √ó (S' n) ‚Üí pushoutA* n
  pushoutMap‚Çõfull (suc n) = pushoutMap‚Çõ n

  
  pushoutIso‚Çõ' : (n : ‚Ñï) ‚Üí Iso (strictPushout n) (Pushout (pushoutMap‚Çõ* n) fst)
  pushoutIso‚Çõ' n = iso (pushoutIso‚Çõ-fun n) (pushoutIso‚Çõ-inv n) (pushoutIso‚Çõ-rightInv n) (pushoutIso‚Çõ-leftInv n)


  mainIso : (n : ‚Ñï) ‚Üí Iso (pushoutA* (suc n)) (Pushout (pushoutMap‚Çõfull n) fst)
  mainIso zero = compIso {!Iso.inv (mainIso ?)!} {!Pushout‚äé!} -- (PushoutEmptyFam (Œª()) Œª())
  mainIso (suc n) = compIso (invIso (strictPushoutA*Iso' n)) (pushoutIso‚Çõ' n)


  improveMainL : (n : ‚Ñï) ‚Üí pushoutA* n ‚Üí pushoutA* (suc n)
  improveMainL zero x = inl (inl (‚à£ f ‚à£ 0 x))
  improveMainL (suc n) (inl x) = inl (inl x)
  improveMainL (suc n) (inr x) = inr (inl (x))
  improveMainL (suc n) (push a i) = push (inl a) i


  improveMainR : (n : ‚Ñï) ‚Üí CardPush n ‚Üí pushoutA* (suc n)
  improveMainR zero (inl x) = inl (inr x)
  improveMainR zero (inr x) = inr (inr x)
  improveMainR (suc n) (inl (inl x)) = inl (inr x)
  improveMainR (suc n) (inl (inr x)) = push (inr x) i0
  improveMainR (suc n) (inr x) = inr (inr x)

  improveMainFillerS : (n : ‚Ñï) (x : _) (b : _) ‚Üí (i j k : I) ‚Üí pushoutA* (suc (suc (suc n)))
  improveMainFillerS n x b i j k =
    hfill (Œª r ‚Üí Œª {(i = i0) ‚Üí push (inl (Œ± B (suc n) (b , x))) (~ j)
                   ; (i = i1) ‚Üí push (inr b) (~ j)
                   ; (j = i0) ‚Üí inr (inl (lUnit (cong (‚à£ g ‚à£ (suc (suc n)) ) (push (b , x))) r i))
                   ; (j = i1) ‚Üí inl (inl (‚à£ f ‚à£ (suc (suc n)) (push (b , x) i)))})
                   (inS (push (push (b , x) i) (~ j))) k

  improveMainFiller : (n : ‚Ñï) (x : _) (b : _) ‚Üí (i j k : I) ‚Üí pushoutA* (suc (suc (suc n)))
  improveMainFiller n x b i j k =
    hfill (Œª r ‚Üí Œª {(i = i0) ‚Üí inl (inl (lUnit (cong (‚à£ f ‚à£ (suc (suc n)) ) (push (b , x))) (~ j) r))
                   ; (i = i1) ‚Üí improveMainFillerS n x b r j i1
                   ; (j = i0) ‚Üí improveMainL (suc (suc n))
                                   (doubleCompPath-filler ((Œª i ‚Üí inl (strictMap {B} {C} f (suc (suc n)) (push (b , x) (~ i)))))
                                   (push (Œ± B (suc n) (b , x)))
                                   (Œª i ‚Üí inr (strictMap {B} {D} g (suc (suc n)) (push (b , x) i))) r i)
                   ; (j = i1) ‚Üí inl (inl (‚à£ f ‚à£ (suc (suc n)) (push (b , x) r)))})
                   (inS (push (inl (Œ± B (suc n) (b , x))) (i ‚àß ~ j))) k

  improveMain : (n : ‚Ñï) ‚Üí Pushout (pushoutMap‚Çõfull n) fst ‚Üí pushoutA* (suc n)
  improveMain n (inl x) = improveMainL n x
  improveMain n (inr x) = improveMainR n x
  improveMain (suc n) (push (inl (inl x) , s) i) = inl (push (x , Iso.inv (IsoSphereSusp n) s) i)
  improveMain (suc n) (push (inl (inr x) , north) i) = push (inr x) i0
  improveMain (suc n) (push (inl (inr x) , south) i) = push (inr x) (~ i)
  improveMain (suc (suc n)) (push (inl (inr b) , merid x i) j) =
    improveMainFiller n x b i j i1
  improveMain (suc n) (push (inr x , s) i) = inr (push (x , Iso.inv (IsoSphereSusp n) s) i)

  improveMain‚â° : (n : ‚Ñï) (x : _) ‚Üí improveMain n x ‚â° Iso.inv (mainIso n) x
  improveMain‚â° n x = {!!}


  mainEquiv : (n : ‚Ñï) ‚Üí (Pushout (pushoutMap‚Çõfull n) fst) ‚âÉ (pushoutA* (suc n))
  fst (mainEquiv n) = improveMain n
  snd (mainEquiv n) = isE
    where
    isE : isEquiv (improveMain n)
    isE = subst isEquiv (funExt (Œª x ‚Üí sym (improveMain‚â° n x)))
      (invEquiv (isoToEquiv (mainIso n)) .snd)


  pushoutA*‚Üë : (n : ‚Ñï) ‚Üí pushoutA* n ‚Üí pushoutA* (suc n)
  pushoutA*‚Üë n x = fst (mainEquiv n) (inl x)

  
  -- isEquivImproveMain : ?


  
  -- C
  cofibCW‚àô : (n : ‚Ñï) (C : CWskel ‚Ñì)  ‚Üí Pointed _
  cofibCW‚àô n C = cofibCW n C , inl tt

  -- non-strict quotiented by non-strict
  -- P‚Çô‚Çä‚ÇÅ/P‚Çô
  cofibPush : (n : ‚Ñï) ‚Üí Type _
  cofibPush n = cofib (pushoutA*‚Üë n)

  -- strict quotiented by non-strict
  -- P‚Çô‚Çä‚ÇÅ‚àº/P‚Çô
  cofibPush' : (n : ‚Ñï) ‚Üí Type _
  cofibPush' n = cofib {A = pushoutA* n} {B = Pushout (pushoutMap‚Çõfull n) fst} inl

  -- These are equuivalent
  cofibsIso : (n : ‚Ñï) ‚Üí cofibPush' n ‚âÉ (cofibPush n)
  cofibsIso n = pushoutEquiv _ _ _ _ (idEquiv _) (idEquiv _) (mainEquiv n) (Œª _ _ ‚Üí tt) Œª i x ‚Üí improveMain n (inl x)

  Œ£SphereBouquet' : (n : ‚Ñï) ‚Üí Type
  Œ£SphereBouquet' n = Susp (SphereBouquet' n ((Fin (card C (suc n)) ‚äé Fin (card B n)) ‚äé Fin (card D (suc n))))

  data ùüõ : Type where
    ùïî ùïï ùïì : ùüõ

  BouquetDecompFam : (n : ‚Ñï) ‚Üí ùüõ ‚Üí Pointed _
  BouquetDecompFam n ùïî = cofibCW‚àô (suc n) C
  BouquetDecompFam n ùïï = cofibCW‚àô (suc n) D
  BouquetDecompFam n ùïì = Susp‚àô (cofibCW n B)

  
  -- C‚Çô‚Çä‚ÇÅ/C‚Çô ‚à® D‚Çô‚Çä‚ÇÅ ‚à® Œ£ B‚Çô/B‚Çô‚Çã‚ÇÅ
  BouquetDecomp : (n : ‚Ñï) ‚Üí Type ‚Ñì
  BouquetDecomp n = ‚ãÅgen ùüõ (BouquetDecompFam n)

 -- Œ£SphereBouquet'‚Üí : ?

  Œ£BouquetDecomp : (n : ‚Ñï) ‚Üí Œ£SphereBouquet' n ‚Üí BouquetDecomp n 
  Œ£BouquetDecomp n north = inl tt
  Œ£BouquetDecomp n south = inl tt
  Œ£BouquetDecomp n (merid (inl x) i) = {!!}
  Œ£BouquetDecomp n (merid (inr (inl (inl x) , y)) i) =
    (push ùïî
    ‚àô‚àô ((Œª j ‚Üí inr (ùïî , push (Œ± C (suc n) (x , Iso.inv (IsoSphereSusp n) y)) j))
    ‚àô‚àô (Œª j ‚Üí inr (ùïî , inr ((push (x , Iso.inv (IsoSphereSusp n) y) ‚àô push (x , ptSn n) ‚Åª¬π) j)))
    ‚àô‚àô Œª j ‚Üí inr (ùïî , push (Œ± C (suc n) (x , ptSn n)) (~ j)))
    ‚àô‚àô (push ùïî ‚Åª¬π)) i
  Œ£BouquetDecomp n (merid (inr (inl (inr x) , y)) i) =
    (push ùïì
    ‚àô‚àô (Œª i ‚Üí inr (ùïì , toSusp (_ , inl tt) (inr {!suspFun (curry (Œ± B n) x) y!}) i))
    ‚àô‚àô push ùïì ‚Åª¬π) i
  Œ£BouquetDecomp n (merid (inr (inr x , y)) i) =
     (push ùïï
    ‚àô‚àô ((Œª j ‚Üí inr (ùïï , push (Œ± D (suc n) (x , Iso.inv (IsoSphereSusp n) y)) j))
    ‚àô‚àô (Œª j ‚Üí inr (ùïï , inr ((push (x , Iso.inv (IsoSphereSusp n) y) ‚àô push (x , ptSn n) ‚Åª¬π) j)))
    ‚àô‚àô Œª j ‚Üí inr (ùïï , push (Œ± D (suc n) (x , ptSn n)) (~ j)))
    ‚àô‚àô (push ùïï ‚Åª¬π)) i
  Œ£BouquetDecomp n (merid (push a i) j) = {!a!}

--   -- strict map to Œ£Bouquet P‚Çô‚Çä‚ÇÅ‚àº ‚Üí Œ£‚ãÅ
--   cofib‚ÜísphereBouquet : (n : ‚Ñï) ‚Üí cofibPush' (suc n) ‚Üí Œ£SphereBouquet' n
--   cofib‚ÜísphereBouquet n (inl x) = north
--   cofib‚ÜísphereBouquet n (inr (inl x)) = north
--   cofib‚ÜísphereBouquet n (inr (inr x)) = south
--   cofib‚ÜísphereBouquet n (inr (push (w  , b) i)) = merid (inr (w , b)) i
--   cofib‚ÜísphereBouquet n (push a i) = north

--   private
--     cofib'‚ÜísphereBouquetFiller : (n : ‚Ñï) (a : _) (s : _)
--       ‚Üí (i j k : I) ‚Üí Œ£SphereBouquet' (suc n)
--     cofib'‚ÜísphereBouquetFiller n a s i j k =
--         hfill (Œª k ‚Üí Œª {(i = i0) ‚Üí north
--                      ; (i = i1) ‚Üí merid (inr (inl (inr a) , merid (ptSn n) j)) (~ k)
--                      ; (j = i0) ‚Üí merid (inr (inl (inr a) , north)) (i ‚àß ~ k)
--                      ; (j = i1) ‚Üí merid (inr (inl (inr a) , south)) (i ‚àß ~ k)})
--             (inS (merid (inr ((inl (inr a)) , merid s j)) i)) k

--   -- non-strict to Œ£Bouquet  P‚Çô‚Çä‚ÇÅ ‚Üí Œ£‚ãÅ
--   cofib'‚ÜísphereBouquet : (n : ‚Ñï) ‚Üí cofibPush (suc n) ‚Üí Œ£SphereBouquet' n
--   cofib'‚ÜísphereBouquet n (inl tt) = north
--   cofib'‚ÜísphereBouquet n (inr (inl (inl x))) = north
--   cofib'‚ÜísphereBouquet n (inr (inl (inr x))) = south
--   cofib'‚ÜísphereBouquet n (inr (inl (push (a , s) i))) =
--     merid (inr (inl (inl a) , Iso.fun (IsoSphereSusp n) s)) i
--   cofib'‚ÜísphereBouquet n (inr (inr (inl x))) = north
--   cofib'‚ÜísphereBouquet n (inr (inr (inr x))) = south
--   cofib'‚ÜísphereBouquet n (inr (inr (push (a , s) i))) =
--     merid (inr ((inr a) , (Iso.fun (IsoSphereSusp n) s))) i
--   cofib'‚ÜísphereBouquet n (inr (push (inl x) i)) = north
--   cofib'‚ÜísphereBouquet zero (inr (push (inr x) i)) =
--     (merid (inr (inl (inr x) , north)) ‚àô sym (merid (inr (inl (inr x) , south)))) i
--   cofib'‚ÜísphereBouquet (suc n) (inr (push (inr x) i)) = north
--   cofib'‚ÜísphereBouquet (suc n) (inr (push (push (a , s) i) j)) =
--     cofib'‚ÜísphereBouquetFiller n a s i j i1
--   cofib'‚ÜísphereBouquet n (push (inl x) i) = north
--   cofib'‚ÜísphereBouquet n (push (inr x) i) = north
--   cofib'‚ÜísphereBouquet n (push (push a i‚ÇÅ) i) = north


--   -- proof that these maps are the same (modulo the their equivalence)
--   module AgreeOnŒ£SphereBoquet where
--     cofSphereInl : (n : ‚Ñï) (x : _)
--       ‚Üí cofib'‚ÜísphereBouquet n (fst (cofibsIso (suc n)) (inr (inl x))) ‚â° cofib‚ÜísphereBouquet n (inr (inl x))
--     cofSphereInl n (inl x) = refl
--     cofSphereInl n (inr x) = refl
--     cofSphereInl n (push a i) = refl

--     cofSphereInr : (n : ‚Ñï) (x : _) ‚Üí cofib'‚ÜísphereBouquet n (fst (cofibsIso (suc n)) (inr (inr x))) ‚â° cofib‚ÜísphereBouquet n (inr (inr x))
--     cofSphereInr n (inl (inl x)) = refl
--     cofSphereInr n (inl (inr x)) = merid (inl tt)
--     cofSphereInr n (inr x) = refl

--     sq1 : ‚àÄ {‚Ñì} {A : Type ‚Ñì} {x y : A} (p : x ‚â° y) (q : x ‚â° y) ‚Üí p ‚â° q ‚Üí (i j k : I) ‚Üí A
--     sq1 {x = x} p q r i j k =
--       hfill (Œª k ‚Üí Œª {(i = i0) ‚Üí x ; (i = i1) ‚Üí r (~ k) j ; (j = i0) ‚Üí x ; (j = i1) ‚Üí q i})
--         (inS (q (i ‚àß j))) k

--     sq2 : ‚àÄ {‚Ñì} {A : Type ‚Ñì} {x y : A} (p : x ‚â° y) (q q' : x ‚â° y) ‚Üí p ‚â° q ‚Üí q ‚â° q' ‚Üí (i j k : I) ‚Üí A
--     sq2 {x = x} p q q' r w i j k =
--       hfill (Œª k ‚Üí Œª {(i = i0) ‚Üí x ; (i = i1) ‚Üí r (~ k) j ; (j = i0) ‚Üí x ; (j = i1) ‚Üí w k i})
--         (inS (q (i ‚àß j))) k

--     -- main
--     cofSphere : (n : ‚Ñï) (x : cofibPush' (suc n)) ‚Üí cofib'‚ÜísphereBouquet n (fst (cofibsIso (suc n)) x) ‚â° cofib‚ÜísphereBouquet n x
--     cofSphere n (inl x) = refl
--     cofSphere n (inr (inl x)) = cofSphereInl n x
--     cofSphere n (inr (inr x)) = cofSphereInr n x
--     cofSphere n (inr (push (inl (inl x) , s) i)) j = merid (inr (inl (inl x) , Iso.rightInv (IsoSphereSusp n) s j)) i
--     cofSphere n (inr (push (inl (inr x) , north) i)) j =
--       sq1 (merid (inl tt)) (merid (inr (inl (inr x) , north))) (cong merid (push (inl (inr x)))) i j i1
--     cofSphere zero (inr (push (inl (inr x) , south) i)) j =
--       hcomp (Œª k ‚Üí Œª {(i = i0) ‚Üí merid (inr (inl (inr x) , south)) (~ k)
--                      ; (i = i1) ‚Üí merid (inl tt) j
--                      ; (j = i0) ‚Üí compPath-filler (merid (inr (inl (inr x) , north))) (sym (merid (inr (inl (inr x) , south)))) k (~ i)
--                      ; (j = i1) ‚Üí merid (inr (inl (inr x) , south)) (~ k ‚à® i)})
--         (sq1 (sym (merid (inl tt))) (sym (merid (inr (inl (inr x) , north))))
--              (cong (sym ‚àò merid) (push (inl (inr x)))) i (~ j)  i1)
--     cofSphere (suc n) (inr (push (inl (inr x) , south) i)) j =
--         sq2 (merid (inl tt)) (merid (inr (inl (inr x) , north)))
--           (merid (inr (inl (inr x) , south))) (cong merid (push (inl (inr x))))
--           (Œª i ‚Üí merid (inr (inl (inr x) , merid (ptSn n) i))) i j i1
--     cofSphere (suc n) (inr (push (inl (inr b) , merid x i) j)) k =
--       hcomp (Œª r ‚Üí Œª {(j = i0) ‚Üí cofSphereInl (suc n)
--                                     (doubleCompPath-filler (Œª i ‚Üí inl (strictMap {B} {C} f (suc (suc n)) (push (b , x) (~ i))))
--                                          (push (Œ± B (suc n) (b , x)))
--                                          (Œª i ‚Üí inr (strictMap {B} {D} g (suc (suc n)) (push (b , x) i))) r i) k
--                      ; (j = i1) ‚Üí merid (push (inl (inr b)) (~ r)) k
--                      ; (k = i0) ‚Üí cofib'‚ÜísphereBouquet (suc n) (inr (improveMainFiller n x b i j r))
--                      ; (k = i1) ‚Üí merid (inr (inl (inr b) , merid x (i ‚àß r))) j
--                      ; (i = i0) ‚Üí (i=i0 _ _  ( (merid (inr (inl (inr b) , north)))) ( (merid (inl tt)))
--                           (sym (cong (merid) (push (inl (inr b))))))  r j k
--                      ; (i = i1) ‚Üí i=i1 r j k})
--             ( (merid (inr (inl (inr b) , north)) (k ‚àß j)))
--       where -- r j k
--       i=i0 : ‚àÄ {‚Ñì} {A : Type ‚Ñì} (x y : A) (pn ps : x ‚â° y) (mx : pn ‚â° ps)
--            ‚Üí Cube (Œª j k ‚Üí pn (k ‚àß j))
--                    (Œª j k ‚Üí sq1 ps pn (sym mx) j k i1)
--                    (Œª k r ‚Üí x) (Œª r k ‚Üí mx r k)
--                    (Œª r j ‚Üí x)
--                   Œª r j ‚Üí pn j
--       i=i0 = Œª x ‚Üí J> (J> (rUnit refl))
--       i=i1 : Cube (Œª j k ‚Üí merid (inr (inl (inr b) , north)) (k ‚àß j))
--                   ((Œª j k ‚Üí sq2 (merid (inl tt)) (merid (inr (inl (inr b) , north)))
--                                      (merid (inr (inl (inr b) , south))) (cong merid (push (inl (inr b))))
--                                      (Œª i ‚Üí merid (inr (inl (inr b) , merid (ptSn n) i))) j k i1))
--                  (Œª _ _ ‚Üí north) (Œª r k ‚Üí merid (push (inl (inr b)) (~ r)) k)
--                  (Œª r j ‚Üí cofib'‚ÜísphereBouquet (suc n) (inr (improveMainFiller n x b i1 j r)))
--                  Œª r j ‚Üí  merid (inr (inl (inr b) , merid x r)) j
--       i=i1 r j k =
--         hcomp (Œª i ‚Üí Œª {(j = i0) ‚Üí north -- north
--                      ; (j = i1) ‚Üí merid (push (inl (inr b)) (~ r ‚à® ~ i)) k
--                      ; (k = i0) ‚Üí cofib'‚ÜísphereBouquet (suc n) (inr (improveMainFillerS n x b r j i))
--                      ; (k = i1) ‚Üí compPath-filler (Œª i ‚Üí merid (inr (inl (inr b) , merid x i)))
--                                 (Œª i ‚Üí merid (inr (inl (inr b) , merid (ptSn n) (~ i)))) (~ i) r j
--                      ; (r = i0) ‚Üí merid (inr (inl (inr b) , north)) (k ‚àß j)
--                      ; (r = i1) ‚Üí sq2 (merid (inl tt)) (merid (inr (inl (inr b) , north)))
--                                      (merid (inr (inl (inr b) , south))) (cong merid (push (inl (inr b))))
--                                      (Œª i ‚Üí merid (inr (inl (inr b) , merid (ptSn n) i))) j k i
--                      })
--          (help _ _ (merid (inr (inl (inr b) , north))) (merid (inr (inl (inr b) , south)))
--                    (Œª i ‚Üí merid (inr (inl (inr b) , merid (ptSn n) i)))
--                    (Œª i ‚Üí merid (inr (inl (inr b) , merid x i))) k j r)
--          where
--          help : ‚àÄ {‚Ñì} {A : Type ‚Ñì} (x y : A) (pn ps : x ‚â° y) (mpt : pn ‚â° ps) (mx : pn ‚â° ps)
--            ‚Üí Cube (Œª j i ‚Üí hcomp (Œª k ‚Üí Œª {(i = i0) ‚Üí x
--                                             ; (i = i1) ‚Üí mpt (~ j) (~ k)
--                                             ; (~ j = i0) ‚Üí pn (i ‚àß ~ k)
--                                             ; (~ j = i1) ‚Üí ps (i ‚àß ~ k)})
--                                    (mx (~ j) i))
--                    (Œª j r ‚Üí (mx ‚àô sym mpt) r j)
--                    (Œª k r ‚Üí x) (Œª k r ‚Üí pn k)
--                    (Œª k j ‚Üí pn (k ‚àß j))
--                    (Œª k j ‚Üí pn (k ‚àß j))
--          help x = J> (J> Œª mx ‚Üí (Œª i j k ‚Üí
--            hcomp (Œª r ‚Üí Œª {(j = i0) ‚Üí x 
--                      ; (j = i1) ‚Üí x
--                      ; (i = i1) ‚Üí mx k j
--                      ; (k = i0) ‚Üí x
--                      ; (k = i1) ‚Üí x}
--                      ) (sym‚â°flipSquare mx i j k)) ‚ñ∑ Œª i j r ‚Üí rUnit (mx) i r j)
--     cofSphere n (inr (push (inr x , s) i)) j = merid (inr (inr x , Iso.rightInv (IsoSphereSusp n) s j)) i
--     cofSphere n (push a i) j = main j i
--       where
--       mm : (n : ‚Ñï) (a : _) ‚Üí Square (cong (cofib'‚ÜísphereBouquet n) (push a))
--                                       (cong (cofib‚ÜísphereBouquet n) (push a))
--                                       refl (cofSphereInl n a)
--       mm n (inl x) = refl
--       mm n (inr x) = refl
--       mm n (push a i) = refl
--       main : Square (cong (cofib'‚ÜísphereBouquet n) (cong (fst (cofibsIso (suc n))) (push a)))
--                     (cong (cofib‚ÜísphereBouquet n) (push a))
--                     refl (cofSphereInl n a)
--       main = (cong-‚àô‚àô (cofib'‚ÜísphereBouquet n) _ _ _ ‚àô sym (rUnit _)) ‚óÅ mm n a



-- --   WedgeDecomp : (n : ‚Ñï) ‚Üí Type ‚Ñì
-- --   WedgeDecomp n = ((cofibCW‚àô (suc n) C) ‚ãÅ‚àô·µ£ (Susp' (cofibCW‚àô n B) , ùï§)) ‚ãÅ cofibCW‚àô (suc n) D

-- --   -- WedgeDecompS : (n : ‚Ñï) ‚Üí Type ‚Ñì
-- --   -- WedgeDecompS n = (Susp‚àô (cofibCW (suc n)) C ‚ãÅ‚àô·µ£ Susp‚àô (Susp (cofibCW n B))) ‚ãÅ cofibCW‚àô (suc n) D

-- --   Bloop : (n : ‚Ñï) ‚Üí B .fst (suc n) ‚Üí Path (WedgeDecomp n) (inl (inl (inl tt))) (inr (inl tt))
-- --   Bloop n x = (Œª i ‚Üí inl (push tt i)) ‚àô‚àô (Œª i ‚Üí inl (inr (ùïù (inr x) i))) ‚àô‚àô push tt

-- --   pushoutA*‚ÜíWedgeDecompF : (n : ‚Ñï) (a :  B .fst (suc n)) ‚Üí (i j : I) ‚Üí WedgeDecomp n
-- --   pushoutA*‚ÜíWedgeDecompF n a i j =
-- --     doubleCompPath-filler {_} {WedgeDecomp n}
-- --       (Œª j ‚Üí inl (((Œª j ‚Üí inl (push (strictMapFun f' (suc n) a) (~ j))) ‚àô push tt) j))
-- --      (Œª i ‚Üí inl (inr (ùïù (inr a) i)))
-- --      (((push tt ‚àô Œª j ‚Üí inr (push (strictMapFun g' (suc n) a) j)))) j i
  
-- --   pushoutA*‚ÜíWedgeDecomp : (n : ‚Ñï) ‚Üí pushoutA* (suc (suc n)) ‚Üí WedgeDecomp n
-- --   pushoutA*‚ÜíWedgeDecomp n (inl x) = inl (inl (inr x))
-- --   pushoutA*‚ÜíWedgeDecomp n (inr x) = inr (inr x)
-- --   pushoutA*‚ÜíWedgeDecomp n (push a i) = pushoutA*‚ÜíWedgeDecompF n a i i1

-- --   pushoutA*‚ÜíWedgeDecomp' : {!!}
-- --   pushoutA*‚ÜíWedgeDecomp' = {!!}

-- --   pushoutA*‚ÜíWedgeDecompVanish'‚àô : (n : ‚Ñï) (x : pushoutA* (suc n)) ‚Üí WedgeDecomp n
-- --   pushoutA*‚ÜíWedgeDecompVanish'‚àô n (inl x) = inl (inl  (inl tt)) -- inl (inl (inl tt))
-- --   pushoutA*‚ÜíWedgeDecompVanish'‚àô n (inr x) = inr (inl tt)
-- --   pushoutA*‚ÜíWedgeDecompVanish'‚àô n (push a i) = ((Œª i ‚Üí inl (push tt i)) ‚àô push tt ) i 

-- --   pushoutA*‚ÜíWedgeDecompVanish' : (n : ‚Ñï) (x : _) ‚Üí pushoutA*‚ÜíWedgeDecompVanish'‚àô n x ‚â° pushoutA*‚ÜíWedgeDecomp n (pushoutA*‚Üë (suc n) x)
-- --   pushoutA*‚ÜíWedgeDecompVanish' n (inl x) i = inl (inl (push x i))
-- --   pushoutA*‚ÜíWedgeDecompVanish' n (inr x) i = inr (push x i)
-- --   pushoutA*‚ÜíWedgeDecompVanish' n (push a i) j = {!!}

-- --   pushoutA*‚ÜíWedgeDecompVanish : (n : ‚Ñï) (x : _) ‚Üí inl (inr ùï§) ‚â° pushoutA*‚ÜíWedgeDecomp n (pushoutA*‚Üë (suc n) x)
-- --   pushoutA*‚ÜíWedgeDecompVanish n (inl x) i = inl (((Œª j ‚Üí inl (push x (~ j))) ‚àô (push tt)) (~ i))
-- --   pushoutA*‚ÜíWedgeDecompVanish n (inr x) = (push tt ‚àô Œª j ‚Üí inr (push x j))
-- --   pushoutA*‚ÜíWedgeDecompVanish n (push a i) j =
-- --     hcomp (Œª k ‚Üí Œª {(i = i0) ‚Üí pushoutA*‚ÜíWedgeDecompF n (inl a) i0 j
-- --                    ; (i = i1) ‚Üí pushoutA*‚ÜíWedgeDecompF n (inl a) i1 j
-- --                    ; (j = i0) ‚Üí inl (inr ((sym ùïî ‚àô cong ùïù (push a)) (~ k) i))
-- --                    ; (j = i1) ‚Üí pushoutA*‚ÜíWedgeDecompF n (inl a) i i1})
-- --           (pushoutA*‚ÜíWedgeDecompF n (inl a) i j)

-- --   toWedgeDecomp : (n : ‚Ñï) ‚Üí cofibPush (suc n) ‚Üí WedgeDecomp n
-- --   toWedgeDecomp n (inl x) = (inl (inr ùï§))
-- --   toWedgeDecomp n (inr x) = pushoutA*‚ÜíWedgeDecomp n x
-- --   toWedgeDecomp n (push x i) = pushoutA*‚ÜíWedgeDecompVanish n x i

-- --   WedegeDecompFunMid : {!!}
-- --   WedegeDecompFunMid = {!!}

-- --   -- precofibToSusp : (n : ‚Ñï) ‚Üí Pushout (pushoutMap‚Çõfull (suc n)) fst ‚Üí Susp (pushoutA* (suc n)) 
-- --   -- precofibToSusp n (inl x) = ùï§
-- --   -- precofibToSusp n (inr x) = ùï§
-- --   -- precofibToSusp n (push a i) = merid {!!} i

-- --   ‚ÜìP : (n : ‚Ñï) ‚Üí cofibPush (suc n) ‚Üí Susp' (cofibPush n , inl tt)
-- --   ‚ÜìP n (inl x) = ùï§
-- --   ‚ÜìP n (inr x) = ùï§
-- --   ‚ÜìP n (push a i) = ùïù (inr a) i

-- --   functL : (n : ‚Ñï) ‚Üí cofibCW n B ‚Üí cofibCW n C
-- --   functL n (inl x) = inl tt
-- --   functL n (inr x) = inr (‚à£ f ‚à£ (suc n) x)
-- --   functL n (push a i) = push (‚à£ f ‚à£ n a) i

-- --   functR : (n : ‚Ñï) ‚Üí cofibCW n B ‚Üí cofibCW n D
-- --   functR n (inl x) = inl tt
-- --   functR n (inr x) = inr (‚à£ g ‚à£ (suc n) x)
-- --   functR n (push a i) = push (‚à£ g ‚à£ n a) i

-- --   Susp‚ÜíSusp' : ‚àÄ {‚Ñì} {A : Pointed ‚Ñì} ‚Üí Susp (typ A) ‚Üí Susp' A
-- --   Susp‚ÜíSusp' north = ùï§
-- --   Susp‚ÜíSusp' south = ùï§
-- --   Susp‚ÜíSusp' (merid a i) = ùïù a i

-- --   WedegeDecompFun : (n : ‚Ñï) ‚Üí WedgeDecomp (suc n) ‚Üí Susp' (WedgeDecomp n , (inl (inr ùï§)))
-- --   WedegeDecompFun n (inl (inl (inl x))) = ùï§
-- --   WedegeDecompFun n (inl (inl (inr x))) = ùï§
-- --   WedegeDecompFun n (inl (inl (push a i))) = ùïù (inl (inl (inr a))) i
-- --   WedegeDecompFun n (inl (inr ùï§)) = ùï§
-- --   WedegeDecompFun n (inl (inr (ùïù a i))) = (ùïù (inl (inl (functL (suc n) a)))
-- --                                       ‚àô‚àô ùïù (inl (inr (Susp‚ÜíSusp' ((suspFun inr ‚àò Œ¥-pre _) a)))) ‚Åª¬π
-- --                                       ‚àô‚àô ùïù (inr (functR (suc n) a)) ‚Åª¬π) i
-- --   WedegeDecompFun n (inl (inr (ùïî i j))) =
-- --     (cong‚ÇÉ _‚àô‚àô_‚àô‚àô_ (cong ùïù (Œª i ‚Üí inl (push tt i))) (Œª _ ‚Üí ùïù (inl (inr ùï§)) ‚Åª¬π) (cong (sym ‚àò ùïù) (sym (push tt)))
-- --     ‚àô cong‚ÇÉ _‚àô‚àô_‚àô‚àô_ ùïî (cong sym ùïî) (cong sym ùïî)
-- --     ‚àô sym (rUnit refl)) i j
-- --   WedegeDecompFun n (inl (push a i)) = ùï§
-- --   WedegeDecompFun n (inr (inl x)) = ùï§
-- --   WedegeDecompFun n (inr (inr x)) = ùï§
-- --   WedegeDecompFun n (inr (push a i)) = ùïù (inr (inr a)) i
-- --   WedegeDecompFun n (push a i) = ùï§

-- --   compWithProjB : (n : ‚Ñï) ‚Üí WedgeDecomp (suc n) ‚Üí Susp' (Susp' (cofibCW‚àô n B) , ùï§)
-- --   compWithProjB n (inl (inl x)) = ùï§
-- --   compWithProjB n (inl (inr ùï§)) = ùï§
-- --   compWithProjB n (inl (inr (ùïù x i))) = ùïù ( (Susp‚ÜíSusp' ((suspFun inr ‚àò Œ¥-pre _) x))) (~ i)
-- --   compWithProjB n (inl (inr (ùïî i i‚ÇÅ))) = ùïî i (~ i‚ÇÅ)
-- --   compWithProjB n (inl (push a i)) = ùï§
-- --   compWithProjB n (inr x) = ùï§
-- --   compWithProjB n (push a i) = ùï§

-- -- -- projOutB n (WedegeDecompFun

-- --   comms-sideF : (n : ‚Ñï) (a : _) (i j k : I)  ‚Üí Susp' (WedgeDecomp n , inl (inr ùï§))
-- --   comms-sideF n a i j k =
-- --     hfill (Œª k ‚Üí Œª {(i = i0) ‚Üí WedegeDecompFun n
-- --                                   (inl (compPath-filler (Œª j ‚Üí inl (push (‚à£ f ‚à£ (suc (suc n)) a) (~ j))) (push tt) (~ j) (~ k)))
-- --                    ; (i = i1) ‚Üí WedegeDecompFun n (compPath-filler' (push tt) (Œª j ‚Üí inr (push (‚à£ g ‚à£ (suc (suc n)) a) j)) (~ j) k)
-- --                    ; (j = i0) ‚Üí WedegeDecompFun n (pushoutA*‚ÜíWedgeDecompF (suc n) a i k)
-- --                    ; (j = i1) ‚Üí doubleCompPath-filler (ùïù (inl (inl (inr (‚à£ f ‚à£ (suc (suc n)) a))))) (sym refl) (ùïù (inr (inr (‚à£ g ‚à£ (suc (suc n)) a))) ‚Åª¬π) (~ k) i
-- --                    })
-- --           (inS (((ùïù (inl (inl (inr (‚à£ f ‚à£ (suc (suc n)) a)))))
-- --            ‚àô‚àô ùïî j  ‚Åª¬π
-- --            ‚àô‚àô (ùïù (inr (inr (‚à£ g ‚à£ (suc (suc n)) a))) ‚Åª¬π)) i)) k

-- --   comms-side : (n : ‚Ñï) (x : _) ‚Üí WedegeDecompFun n (pushoutA*‚ÜíWedgeDecomp (suc n) x) ‚â° ùï§
-- --   comms-side n (inl x) = refl
-- --   comms-side n (inr x) = refl
-- --   comms-side n (push a i) j = comms-sideF n a i j i1
-- --   {-
-- --     WedegeDecompFun n (hcomp (Œª k ‚Üí Œª {(i = i0) ‚Üí pushoutA*‚ÜíWedgeDecompF (suc n) a i0 j
-- --                    ; (i = i1) ‚Üí pushoutA*‚ÜíWedgeDecompF (suc n) a i1 j
-- --                    ; (j = i0) ‚Üí ?
-- --                    ; (j = i1) ‚Üí pushoutA*‚ÜíWedgeDecompF (suc n) a i i1})
-- --           (pushoutA*‚ÜíWedgeDecompF (suc n) a i j))
-- -- -}


  

-- --   suspFun' : ‚àÄ {‚Ñì ‚Ñì'} {A : Pointed ‚Ñì} {B : Type ‚Ñì'} ‚Üí (f : fst A ‚Üí B) ‚Üí Susp' A ‚Üí Susp' (B , f (pt A))
-- --   suspFun' f ùï§ = ùï§
-- --   suspFun' f (ùïù x i) = ùïù (f x) i
-- --   suspFun' f (ùïî i i‚ÇÅ) = ùïî i i‚ÇÅ

-- --   projOutB' :  (n : ‚Ñï)  ‚Üí WedgeDecomp n ‚Üí (Susp' (cofibCW‚àô n B))
-- --   projOutB' n (inl (inl x)) = ùï§
-- --   projOutB' n (inl (inr x)) = x
-- --   projOutB' n (inl (push a i)) = ùï§
-- --   projOutB' n (inr x) = ùï§
-- --   projOutB' n (push a i) = ùï§

-- --   projOutB : (n : ‚Ñï) ‚Üí Susp' (WedgeDecomp n , inl (inr ùï§)) ‚Üí Susp' (Susp' (cofibCW‚àô n B) , ùï§)
-- --   projOutB n ùï§ = ùï§
-- --   projOutB n  (ùïù x‚ÇÅ i) = ùïù (projOutB' n x‚ÇÅ) i
-- --   projOutB n  (ùïî i i‚ÇÅ) = ùïî i i‚ÇÅ



-- --   comms? : (n : ‚Ñï) (x : _) ‚Üí compWithProjB n (toWedgeDecomp (suc n) x)
-- --                              ‚â° projOutB n (suspFun' (toWedgeDecomp n) (‚ÜìP (suc n) x))
-- --   comms? n (inl x) = refl
-- --   comms? n (inr (inl x)) = refl
-- --   comms? n (inr (inr x)) = refl
-- --   comms? n (inr (push a i)) = {!!}
-- --   comms? n (push (inl x) i) j = {!!}
-- --   comms? n (push (inr x) i) j = {!!}
-- --   comms? n (push (push a j) k) w = {!!}
  

-- -- --   comms? : (n : ‚Ñï) (x : _) ‚Üí projOutB n (WedegeDecompFun n (toWedgeDecomp (suc n) x))
-- -- --                              ‚â° projOutB n (suspFun' (toWedgeDecomp n) (‚ÜìP (suc n) x))
-- -- --   comms? n (inl x) = refl
-- -- --   comms? n (inr (inl x)) = refl
-- -- --   comms? n (inr (inr x)) = refl
-- -- --   comms? n (inr (push x i)) = {!!}
-- -- --     where
-- -- --     help : cong (Œª x ‚Üí projOutB n (WedegeDecompFun n (toWedgeDecomp (suc n) (inr x)))) (push x) -- (push x)
-- -- --          ‚â° (Œª i ‚Üí projOutB n (suspFun' (toWedgeDecomp n) (‚ÜìP (suc n) (inr (push x i)))))
-- -- --     help = {!!} ‚àô {!!}
-- -- --   comms? n (push (inl x) i) = {!!}
-- -- --   comms? n (push (inr x) i) = {!!}
-- -- --   comms? n (push (push a i‚ÇÅ) i) = {!!}


-- -- -- --   comms? n (inl x) = refl
-- -- -- --   comms? n (inr x) = comms-side n x
-- -- -- --   comms? n (push (inl x) i) j =
-- -- -- --     WedegeDecompFun n (inl (compPath-filler (Œª j ‚Üí inl (push x (~ j))) (push tt) (~ j) (~ i)))
-- -- -- --   comms? n (push (inr x) i) j =
-- -- -- --     WedegeDecompFun n (compPath-filler' (push tt) (Œª j ‚Üí inr (push x j)) (~ j) i)
-- -- -- --   comms? n (push (push a i) j) k =
-- -- -- --     hcomp (Œª r ‚Üí Œª {(i = i0) ‚Üí WedegeDecompFun n (inl
-- -- -- --                                  (compPath-filler (Œª j ‚Üí inl (push (inl (‚à£ f ‚à£ (suc n) a)) (~ j)))
-- -- -- --                                  (push tt) (~ k) (~ j ‚à® ~ i1))) 
-- -- -- --                   ; (i = i1) ‚Üí WedegeDecompFun n (compPath-filler' (push tt) (Œª j ‚Üí inr (push (inl (‚à£ g ‚à£ (suc n) a)) j)) (~ k) (j ‚àß i1)) -- 
-- -- -- --                   ; (j = i0) ‚Üí ùï§
-- -- -- --                   ; (j = i1) ‚Üí comms-sideF n (inl a) i k i1 -- comms-sideF n (inl a) i k r
-- -- -- --                   ; (k = i0) ‚Üí rewrLeft (~ r) i j
-- -- -- --                   ; (k = i1) ‚Üí rewrRight (~ r) i j}) -- ùïù (pushoutA*‚ÜíWedgeDecompF n a i r) j})
-- -- -- --    (
-- -- -- --     hcomp (Œª r ‚Üí Œª {(i = i0) ‚Üí WedegeDecompFun n (inl (compPath-filler (Œª j ‚Üí inl (push (inl (‚à£ f ‚à£ (suc n) a)) (~ j))) (push tt) (~ k ) (~ j ‚à® ~ r)))  -- 
-- -- -- --                   ; (i = i1) ‚Üí WedegeDecompFun n (compPath-filler' (push tt) (Œª j ‚Üí inr (push (inl (‚à£ g ‚à£ (suc n) a)) j)) (~ k) (j ‚àß r)) --  -- 
-- -- -- --                   ; (j = i0) ‚Üí WedegeDecompFun n (inl (inr (ùïî r i)))
-- -- -- --                   ; (j = i1) ‚Üí comms-sideF n (inl a) i k r
-- -- -- --                   ; (k = i0) ‚Üí k0 r i j
-- -- -- --                   ; (k = i1) ‚Üí {! -- comms-sideF n (inl a) i k r!}
-- -- -- --                   }) -- comms-sideF n (inl a) i k r} -- comms-sideF n (inl a) i k r}) -- ùïù (pushoutA*‚ÜíWedgeDecompF n a i r) j})
-- -- -- --           ((ùïù (inl (inl (push (‚à£ f ‚à£ (suc n) a) j)))
-- -- -- --           ‚àô‚àô sym (ùïî (k ‚àß j))
-- -- -- --           ‚àô‚àô (ùïù ( (inr (push (‚à£ g ‚à£ (suc n) a) j))) ‚Åª¬π)) i))
-- -- -- --      where -- r i j
-- -- -- --      rewrLeft : Path (Square _ _ _ _) (Œª i j ‚Üí WedegeDecompFun n (toWedgeDecomp (suc n) (push (push a i) j)))
-- -- -- --                                       _
-- -- -- --      rewrLeft = cong-hcomp (WedegeDecompFun n) ‚àô refl

-- -- -- --      rewrRight : Path (Square {A = (Susp' (_ , inl (inr ùï§)))} _ _ _ _) (cong ùïù (Œª j ‚Üí pushoutA*‚ÜíWedgeDecompF n a j i1)) _
-- -- -- --      rewrRight = cong-‚àô‚àô ùïù _ _ _

-- -- -- --      k0 : Cube (Œª i j ‚Üí (ùïù (inl (inl (push (‚à£ f ‚à£ (suc n) a) j)))
-- -- -- --           ‚àô‚àô sym (ùïù (inl (inr ùï§)))
-- -- -- --           ‚àô‚àô (ùïù ( (inr (push (‚à£ g ‚à£ (suc n) a) j))) ‚Åª¬π)) i)
-- -- -- --                (Œª i j ‚Üí rewrLeft i1 i j)
-- -- -- --                (Œª r j ‚Üí WedegeDecompFun n
-- -- -- --                         (inl
-- -- -- --                          (compPath-filler (Œª j‚ÇÅ ‚Üí inl (push (inl (‚à£ f ‚à£ (suc n) a)) (~ j‚ÇÅ)))
-- -- -- --                           (push tt) (~ i0) (~ j ‚à® ~ r))) )
-- -- -- --                (Œª r j ‚Üí WedegeDecompFun n
-- -- -- --                           (compPath-filler' (push tt)
-- -- -- --                            (Œª j‚ÇÇ ‚Üí inr (push (inl (‚à£ g ‚à£ (suc n) a)) j‚ÇÇ)) (~ i0) (j ‚àß r)))
-- -- -- --                (Œª r i ‚Üí WedegeDecompFun n (inl (inr (ùïî r i))))
-- -- -- --                 (Œª r i ‚Üí comms-sideF n (inl a) i i0 r)
               
-- -- -- --      k0 r i j = hcomp (Œª k ‚Üí Œª {(i = i0) ‚Üí {!!}
-- -- -- --                   ; (i = i1) ‚Üí {!!}
-- -- -- --                   ; (j = i0) ‚Üí {!!}
-- -- -- --                   ; (j = i1) ‚Üí {!!}
-- -- -- --                   ; (r = i0) ‚Üí {!!}})
-- -- -- --             {!rewrLeft i1 i i1!}
  

-- -- -- --   {-

-- -- -- -- {-
-- -- -- -- strictPushout
-- -- -- -- -}

-- -- -- --   strictPushoutIso : (n : ‚Ñï) ‚Üí Iso (strictPushout n) (pushoutA* (suc (suc n)))
-- -- -- --   Iso.fun (strictPushoutIso n) (inl (inl x)) = inl (inl x)
-- -- -- --   Iso.fun (strictPushoutIso n) (inl (inr x)) = inl (inr x)
-- -- -- --   Iso.fun (strictPushoutIso n) (inl (push (a , b) i)) = inl (push (a , Iso.inv (IsoSphereSusp n) b) i)
-- -- -- --   Iso.fun (strictPushoutIso n) (inr (inl x)) = inr (inl x)
-- -- -- --   Iso.fun (strictPushoutIso n) (inr (inr x)) = inr (inr x)
-- -- -- --   Iso.fun (strictPushoutIso n) (inr (push (a , b) i)) = inr (push ( (a , Iso.inv (IsoSphereSusp n) b)) i)
-- -- -- --   Iso.fun (strictPushoutIso n) (push (inl x) i) = push (inl x) i
-- -- -- --   Iso.fun (strictPushoutIso n) (push (inr x) i) = push (inr x) i
-- -- -- --   Iso.fun (strictPushoutIso n) (push (push (a , s) j) i) =
-- -- -- --     hcomp (Œª k ‚Üí Œª {(i = i0) ‚Üí {!inl (inl (strictMap f (suc n) (push (a , s) j)))!} ; (i = i1) ‚Üí {!!} ; (j = i0) ‚Üí {!!} ; (j = i1) ‚Üí {!!}})
-- -- -- --       (push (push (a , s) j) i)
-- -- -- --   Iso.inv (strictPushoutIso n) x = {!!}
-- -- -- --   Iso.rightInv (strictPushoutIso n) = {!!}
-- -- -- --   Iso.leftInv (strictPushoutIso n) = {!!}
-- -- -- -- -}
